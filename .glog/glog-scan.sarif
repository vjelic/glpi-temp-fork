{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-471a893e-e2a0-4daa-93b5-01025eebede2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5c260907-0d9c-478d-9589-68b5f66ec91d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Values\" in PHP arises when user input from GET, POST, or COOKIE requests is directly output to a web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker injects malicious scripts into web pages viewed by other users. In the provided code snippet, the value from `$_POST['reserve'][\"end\"]` is directly used in the `Html::hidden` function, which may lead to XSS if not properly encoded.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before displaying it in the HTML context. Use appropriate encoding functions provided by your framework or language to ensure that special characters are safely encoded.\n\n### Source Code Fix Recommendation\n\nTo fix the specific vulnerability in the code snippet, ensure that the value from `$_POST['reserve'][\"end\"]` is properly encoded before being used. Assuming `Html::hidden` does not automatically encode values, you can use PHP's `htmlspecialchars` function to encode the input:\n\n```php\necho Html::hidden('end', ['value' => htmlspecialchars($_POST['reserve'][\"end\"], ENT_QUOTES, 'UTF-8')]);\n```\n\n### Library Dependencies\n\nThe code example appears to use a custom or framework-specific `Html` class. Ensure that the following dependencies are included in your project:\n\n- The PHP framework or library that provides the `Html` class (e.g., Yii, Laravel, etc.).\n- PHP version that supports the `htmlspecialchars` function (PHP 4 >= 4.0.3, PHP 5, PHP 7, PHP 8).\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-1b5f36d6-2ffe-42b1-8757-76390c7408f4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-dd26e39b-8539-48a1-8611-9b8cdca0c7c3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-58f4d638-e42b-4cba-8ec8-8db94ff7203c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Echoing Unencoded Values from GET/POST/COOKIE\" in PHP arises when user input is directly echoed or outputted to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the given code snippet, the value from `$_POST['reserve'][\"begin\"]` is directly used in the `Html::hidden` function, which may lead to XSS if not properly encoded.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user inputs before outputting them to the browser. Use appropriate encoding functions based on the context (HTML, JavaScript, URL, etc.). Additionally, consider using security libraries or frameworks that automatically handle encoding.\n\n### Source Code Fix Recommendation\n\nTo fix the specific vulnerability in the code snippet, ensure that the value from `$_POST['reserve'][\"begin\"]` is properly encoded before being used. Assuming `Html::hidden` does not automatically encode values, you can use PHP's `htmlspecialchars` function to encode the input:\n\n```php\necho Html::hidden('begin', ['value' => htmlspecialchars($_POST['reserve'][\"begin\"], ENT_QUOTES, 'UTF-8')]);\n```\n\n### Library Dependencies\n\nThe code example uses the `Html` class, which is not a part of PHP's standard library. It is likely part of a framework or library such as Yii or a custom implementation. Ensure that the following dependencies are included in your project:\n\n- Yii Framework (if `Html` is from Yii): `yiisoft/yii2`\n- Alternatively, ensure any custom or third-party library providing the `Html` class is properly included.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-c5cf6ab3-2f9a-47b9-a45e-4714ca6898cb",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9f13e5b5-18c2-4e75-9b35-edaba655be7b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c9216c42-230a-4b52-9594-64d04f7a66ff",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4f52aa70-37a6-47b8-8fd9-c41474a3e3ed",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5e8b38cc-396c-48ac-9135-df965f5a2bbe",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-53144bd8-6735-4450-9277-d141d6d6166a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e1f6b21b-32d1-49b6-9ed1-30864f43dc2e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f8e5b228-3727-41fe-a827-ba98421e63be",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-00b3bc6a-88f5-4592-b045-5d97a31b82dc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-96965502-eeea-4275-8980-e8de1f9495f0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e6879790-fa79-4f44-89bb-e6adbc6cb32e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7c873453-b5eb-4e67-ae3d-32f4ff978008",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fe9f6c4e-9646-42a7-80d1-bfa8bbb196b0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9ff82fd2-5df9-4713-9dc2-b1e6894656fb",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e9ea6a8f-039c-415a-8b33-750db9595c99",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Echoing Unencoded Values from GET/POST/COOKIE\" in PHP arises when user input is directly echoed back to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. The vulnerability is particularly dangerous when dealing with data from `$_GET`, `$_POST`, or `$_COOKIE` superglobals, as these can be manipulated by an attacker.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before outputting it to the browser. Use appropriate encoding functions based on the context in which the data will be used. For HTML content, use `htmlspecialchars()` or `htmlentities()` to encode special characters.\n\n### Source Code Fix Recommendation\n\nThe provided code snippet is vulnerable to XSS because it does not properly encode user input. Here's a fixed version of the code:\n\n```php\n<?php\nfunction htmlescape($string) {\n    return htmlspecialchars($string, ENT_QUOTES, 'UTF-8');\n}\n\necho \"<input type='hidden' name='\" . htmlescape($_POST['name']) . \"' value='\" . htmlescape($_POST['value']) . \"'>\";\n?>\n```\n\n### Library Dependencies\n\nThe code example does not require any external library dependencies to execute properly. The `htmlspecialchars()` function is built into PHP and does not require additional libraries.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-dce4c6a3-ce5e-4579-a496-cd717ed50c89",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-212a90f1-168e-48ed-9e93-fea9935bec84",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c1879db1-3a04-4846-ad60-dd5f37c57b48",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-aaba5271-c05f-4d7b-968e-f969231cc834",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-bc0b9422-c89d-44a1-babf-a64b4459ea3f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-68901be5-3fe0-41ff-8fe9-bd1019015d2e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-68207e2d-3e4e-49d6-ad2a-3f8379e85188",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-29dc51d4-04b7-457f-a79a-9f4d8cad6a0e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-aa6560a1-b7b4-41ee-8a02-7879b53f115d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ebbd3b0f-4c5d-49fe-95b8-5da59f4a78b0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b79e2c03-8eaa-4cc9-b065-a4764957c414",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-16cc980a-9bba-4302-85cf-de45e417adaa",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6117939c-7356-42bf-9735-2be18eb0e07d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability described here is a type of Cross-Site Scripting (XSS) vulnerability that occurs when untrusted data is used in a web application without proper encoding. In this specific case, the PHP code is directly echoing values from `$_GET`, which are user-supplied inputs, without any encoding or validation. This can allow an attacker to inject malicious scripts into the web page, which can be executed in the context of the user's browser.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that the data conforms to the expected format and type.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use functions like `htmlspecialchars()` to prevent XSS by encoding special characters.\n3. **Use Security Libraries**: Utilize libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the given code, you should encode the output using `htmlspecialchars()` or a similar function. Here's a fixed version of the code:\n\n```php\n<?php\n// Ensure that the 'itemtype' and 'items_id' are properly validated and sanitized\n$itemtype = htmlspecialchars($_GET['itemtype'], ENT_QUOTES, 'UTF-8');\n$items_id = htmlspecialchars($_GET['items_id'], ENT_QUOTES, 'UTF-8');\n\n// Use the sanitized variables in the echo statement\necho $itemtype::renderDcBreadcrumb($items_id);\n?>\n```\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it uses built-in PHP functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-9d1abe9a-7203-4ccf-afca-09d73a1b39ed",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e98279e8-8b50-41dd-853d-0ca8f721148f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Data\" in PHP refers to a Cross-Site Scripting (XSS) issue where user-supplied data from GET, POST, or COOKIE requests is output to a web page without proper encoding. This can allow attackers to inject malicious scripts into web pages viewed by other users, potentially leading to session hijacking, defacement, or other malicious activities.\n\nIn the provided code snippet, the vulnerability arises from directly echoing user input from `$_REQUEST['embed']` without encoding it. This can be exploited if an attacker crafts a request with malicious JavaScript code in the `embed` parameter.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Validate and sanitize all user inputs. Ensure that inputs conform to expected formats and reject any that do not.\n2. **Output Encoding**: Encode all output data that is derived from user input. Use appropriate encoding functions to prevent XSS.\n3. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the provided code, ensure that the user input is properly encoded before being output. Use PHP's `htmlspecialchars()` function to encode the data:\n\n```php\necho $grid->getGridItemsHtml(true, htmlspecialchars($_REQUEST['embed'], ENT_QUOTES, 'UTF-8'));\n```\n\n### Library Dependencies\n\nThe code example provided does not specify any external library dependencies. However, ensure that your PHP environment is up-to-date and configured securely.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-a1e4638d-28c8-4622-8061-b8c443cadfe3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b12e0f8e-69bb-4297-bed0-85550e48e38d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Data\" in PHP arises when user input is directly output to a web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the use of `echo $grid->getFilterHtml($_REQUEST['filter_id'])` directly outputs user-controlled data from the `$_REQUEST` superglobal, which can include GET, POST, or COOKIE data, without any encoding or sanitization.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Validate all user inputs to ensure they conform to expected formats and types.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use functions like `htmlspecialchars()` in PHP to encode special characters.\n3. **Use Security Libraries**: Utilize security libraries or frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the given code, ensure that the output is properly encoded before being echoed to the browser. Here's a fixed version of the code:\n\n```php\n<?php\n// Assuming $grid->getFilterHtml() returns a string that needs to be safely output\n$filterId = $_REQUEST['filter_id'] ?? '';\necho htmlspecialchars($grid->getFilterHtml($filterId), ENT_QUOTES, 'UTF-8');\n```\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-ffebbb65-d4ba-4e77-a591-83e29b6011ad",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c07dd546-c5f3-44f7-a0bb-3e978f82911b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Values\" in PHP arises when user input is directly output to a web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the use of `$_REQUEST['filters']` without encoding can lead to such vulnerabilities if the input is not properly sanitized and encoded before being displayed.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use functions like `filter_input()` or `filter_var()` to ensure inputs are of the expected type and format.\n\n2. **Output Encoding**: Encode data before outputting it to the browser. Use `htmlspecialchars()` or `htmlentities()` to convert special characters to HTML entities.\n\n3. **Use Prepared Statements**: When dealing with database queries, use prepared statements to prevent SQL injection, which can be a vector for XSS attacks.\n\n4. **Content Security Policy (CSP)**: Implement a strong CSP to mitigate the impact of XSS by restricting the sources from which scripts can be loaded.\n\n5. **Regular Security Audits**: Regularly audit your code for vulnerabilities and keep your libraries and frameworks up to date.\n\n### Source Code Fix Recommendation\n\nTo fix the specific vulnerability in the code snippet, ensure that the output is properly encoded before being echoed:\n\n```php\necho htmlspecialchars($grid->getFiltersSetHtml($_REQUEST['filters'] ?? []), ENT_QUOTES, 'UTF-8');\n```\n\n### Library Dependencies\n\nThe code example provided does not specify any external library dependencies. However, if `$grid` is an instance of a class from a specific library, ensure that the library is properly included and autoloaded in your project.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-d1321943-0c17-4e32-9bb3-d03f3abea0b0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0b1fb586-0996-4b06-b8d7-98d88a8f58c8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-863b52fc-a51a-43b7-91cd-95d8cd74ca25",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-40e9d5f2-8a2a-4c36-ae3c-d4ab89dcd31c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Echoing Unencoded Values from GET/POST/COOKIE\" in PHP arises when user input is directly echoed to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker injects malicious scripts into web pages viewed by other users. In the given code example, the value from `$_REQUEST['card_id']` is directly echoed, which can be exploited if not properly sanitized and encoded.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before outputting it to the browser. Use appropriate encoding functions based on the context (HTML, JavaScript, URL, etc.). Additionally, validate and sanitize input data to ensure it meets expected formats and values.\n\n### Source Code Fix Recommendation\n\nTo fix the specific vulnerability in the code example, use the `htmlspecialchars()` function to encode the output:\n\n```php\necho htmlspecialchars($grid->getCardHtml($_REQUEST['card_id']), ENT_QUOTES, 'UTF-8');\n```\n\n### Library Dependencies\n\nThe code example does not require any additional library dependencies to execute properly, as it uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-7351bac9-e8ad-4d46-919d-366d19eb2fb3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-dfe1135a-2aa7-4c62-a46d-0a39c043a0b3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-25fd0af6-b51e-4a0b-9b93-da7b091eccda",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-18cfe9aa-83d5-4491-b59f-87ce341f2631",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-bb904715-4408-433a-b5e6-8bf56689652c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Values\" in PHP arises when user input from GET, POST, or COOKIE requests is directly output to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker injects malicious scripts into web pages viewed by other users. In the provided code example, the value from `$_POST['dashboard']` is directly used in a method call and potentially echoed without encoding, making it susceptible to XSS if the method outputs the value.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Validate all incoming data to ensure it meets the expected format and type.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use functions like `htmlspecialchars()` in PHP to encode special characters.\n3. **Use Security Libraries**: Utilize libraries that help prevent XSS by automatically encoding output.\n4. **Content Security Policy (CSP)**: Implement CSP headers to mitigate the impact of XSS by restricting the sources of content that can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the provided code, ensure that any output is properly encoded. Assuming the `delete` method outputs the value, you should encode it before use:\n\n```php\n<?php\n// Assuming $dashboard->delete() outputs the value, encode it\n$dashboardKey = htmlspecialchars($_POST['dashboard'], ENT_QUOTES, 'UTF-8');\necho $dashboard->delete(['key' => $dashboardKey]);\n```\n\n### Library Dependencies\n\nThe code example does not require any additional library dependencies to execute properly, as it uses native PHP functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-9074d5d6-4ab3-462f-af43-45a09adf66f4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6c3534f9-c01e-4c1e-8a11-a1ea220c7871",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-56e3517f-5fe3-47ce-a6ba-6120ad9d92c0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7bfa7b38-41ed-4f52-bc3d-40f88d5a0990",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-abda2ad7-f1cc-4e2b-91e6-2f8a422bc159",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9ece3211-5795-461c-afb7-f391448d3d4b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c18a4450-b82e-421a-88a0-ef45f227129e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-063f0e90-f3e9-40f7-be7f-2148508e72a6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-2e34d559-e03a-46cf-9f14-659f51d81c96",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Echoing Unencoded Values from GET/POST/COOKIE\" in PHP arises when user input from GET, POST, or COOKIE is directly echoed or output without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the value from `$_GET['itemtype']` is directly used in `json_encode` and echoed, which can be exploited if not properly sanitized and encoded.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that the input is of the expected type and format.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use appropriate encoding functions to prevent XSS.\n3. **Use Security Libraries**: Utilize libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to mitigate the impact of XSS attacks.\n\n### Source Code Fix Recommendation\n\nTo mitigate the vulnerability in the provided code snippet, ensure that the input is properly sanitized and encoded before being used. Here is a revised version of the code:\n\n```php\n<?php\n\n// Assuming Webhook::getMonacoSuggestions is a function that returns suggestions based on item type\nrequire 'Webhook.php';\n\n// Sanitize the input\n$itemType = filter_input(INPUT_GET, 'itemtype', FILTER_SANITIZE_STRING);\n\n// Get suggestions\n$suggestions = Webhook::getMonacoSuggestions($itemType);\n\n// Encode the output\necho json_encode($suggestions, JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS | JSON_HEX_QUOT);\n\n?>\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library dependencies are required:\n\n- `Webhook.php`: This file should contain the `Webhook` class with the `getMonacoSuggestions` method.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-c495ac11-f833-4e34-995e-cab77cad2659",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-161778dd-fd1a-4dbf-bdf9-a129fb8c2c24",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f4ea316f-13cc-46dc-8ca1-95f8035b5fa0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-91927349-81bd-41bf-a1f2-a1f2a7b5f733",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fd01dbc9-d92c-4608-ab8f-9c3f39a10f00",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9f246872-e027-4f56-b440-f2a6b2452276",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8e3a8987-a60f-4b4c-9717-0a5737b40afd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6a0c185c-5e8b-45fc-9c87-8156c486f389",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-56f72a6f-f3d8-4768-ae5f-c933c3edf4aa",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Values\" in PHP arises when user input from GET, POST, or COOKIE requests is directly output to a web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker injects malicious scripts into web pages viewed by other users. In the provided code snippet, the `$_POST['key']` value is directly echoed, which can be exploited if it contains malicious JavaScript code.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before displaying it in the browser. Use PHP's built-in functions to ensure that any HTML special characters are properly encoded, preventing the execution of injected scripts.\n\n### Source Code Fix Recommendation\n\nTo fix the specific vulnerability in the code snippet, use the `htmlspecialchars()` function to encode the output:\n\n```php\necho htmlspecialchars(MarketplaceView::getButtons($_POST['key']), ENT_QUOTES, 'UTF-8');\n```\n\nThis function converts special characters to HTML entities, which prevents the execution of any embedded scripts.\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-5c4877b6-55c3-4537-8a9b-5fa3e28d248e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Values\" in PHP arises when user input is directly output to a web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the given code snippet, the value from `$_GET['key']` is used to access a session variable and is then echoed directly to the page. If `$_GET['key']` is not properly validated and encoded, it can be exploited to execute arbitrary JavaScript in the context of the user's browser.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that the input conforms to the expected format and type.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use functions like `htmlspecialchars()` to prevent XSS by converting special characters to HTML entities.\n3. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the provided code snippet, ensure that the output is properly encoded:\n\n```php\n<?php\n// Ensure the key is a valid index\n$key = filter_input(INPUT_GET, 'key', FILTER_SANITIZE_STRING);\n\n// Check if the key exists in the session array\nif (isset($_SESSION['marketplace_dl_progress'][$key])) {\n    // Encode the output to prevent XSS\n    echo htmlspecialchars($_SESSION['marketplace_dl_progress'][$key], ENT_QUOTES, 'UTF-8');\n} else {\n    echo 'Invalid key.';\n}\n?>\n```\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it uses built-in PHP functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-fc0d5667-890e-434c-b0fd-e3ac8cc40133",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b4d7f4a1-3e70-4614-af7e-b02a32dfcf74",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4b499f55-d442-4407-bfdf-4f5c36fbbcdd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d264fc87-4eed-4a64-a21c-334a36b44dc3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ec92c470-ded0-411d-ae60-7ccaf50f9c53",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-37f87741-ab2c-4974-b18e-25ab3eb2a068",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-70f399a7-180b-4499-bda0-cc71166c10c2",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using untrusted input without proper validation or sanitization. This can lead to various security issues, such as open redirects, phishing attacks, or even server-side request forgery (SSRF). Attackers can manipulate the URL to redirect users to malicious sites or access internal resources.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected values are accepted.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Avoid using user input directly in URL construction. If necessary, encode the input properly.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n// Original vulnerable code\n$url = $_GET['url'];\nheader(\"Location: $url\");\n\n// Fixed code\n$url = $_GET['url'];\n\n// Validate the URL\nif (filter_var($url, FILTER_VALIDATE_URL)) {\n    // Whitelist domains\n    $parsedUrl = parse_url($url);\n    $allowedDomains = ['example.com', 'another-example.com'];\n\n    if (in_array($parsedUrl['host'], $allowedDomains)) {\n        header(\"Location: $url\");\n        exit;\n    } else {\n        echo \"Invalid URL.\";\n    }\n} else {\n    echo \"Invalid URL.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-06264541-76dd-4131-bfad-2afb64355c82",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using untrusted input without proper validation or sanitization. This can lead to various security issues, such as open redirects, phishing, or even server-side request forgery (SSRF). Attackers can manipulate these URLs to redirect users to malicious sites or access internal resources.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected values are accepted.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Avoid using user input directly in URL construction. If necessary, encode the input properly.\n4. **Implement Allowlist**: If redirects are necessary, implement an allowlist of trusted domains.\n5. **Use HTTPS**: Ensure all URLs use HTTPS to prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\n```php\n<?php\n// Original vulnerable code\n$url = $_GET['url'];\nheader(\"Location: $url\");\n\n// Fixed code\n$allowed_domains = ['example.com', 'anotherexample.com'];\n$url = $_GET['url'];\n\n// Validate URL\nif (filter_var($url, FILTER_VALIDATE_URL)) {\n    $parsed_url = parse_url($url);\n    if (in_array($parsed_url['host'], $allowed_domains)) {\n        header(\"Location: $url\");\n        exit;\n    }\n}\n\necho \"Invalid URL.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-dbee0de4-ac6a-4aee-aec3-b360d8bd750e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e482649e-f485-4778-be32-eb2f5278e81e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8aaa93bc-df1d-4ba9-bfe0-70ad1ecbb20c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-cc047f94-1303-4da8-8544-ca5bd8d25bf3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-089e6553-afe6-4b7d-a391-713c52b8db9f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-afd73770-1461-4a4d-9b97-bc5c77a22514",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-90b8db88-ff66-4eb4-b6aa-35ae02025e80",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-94e8ec8e-d662-463c-b339-b68702b3ed24",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1337dc81-09e5-47f7-8020-f9a4b804072a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f923a7f5-f8e6-4e7e-aa5e-9f78c73100ca",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8e6a2650-68f0-4b97-99fc-6d4059004c74",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured Web Address\" Vulnerability in PHP\n\nThe \"Unsecured Web Address\" vulnerability in PHP occurs when a web application improperly handles URLs, allowing attackers to manipulate or inject malicious URLs. This can lead to various security issues, such as open redirects, phishing, or even server-side request forgery (SSRF). The vulnerability typically arises from insufficient validation or sanitization of user-supplied URLs.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs, especially URLs. Use a whitelist approach to allow only known and safe URLs.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct Redirection**: Avoid redirecting users to URLs based on user input. If necessary, use a mapping of known safe URLs.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured web address vulnerability in PHP:\n\n```php\n<?php\n// Example of vulnerable code\n$url = $_GET['url'];\nheader(\"Location: $url\");\n\n// Fixed code\n$allowed_domains = ['example.com', 'anotherexample.com'];\n$url = $_GET['url'];\n\n// Validate URL\nif (filter_var($url, FILTER_VALIDATE_URL)) {\n    $parsed_url = parse_url($url);\n    if (in_array($parsed_url['host'], $allowed_domains)) {\n        header(\"Location: $url\");\n        exit;\n    }\n}\n\necho \"Invalid URL.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions for URL validation and parsing.\n\n### OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese links were verified to be active and accessible to anonymous users as of the last check."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-0cea76f9-fa92-426d-998d-05228b05176f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-712bb51d-56b7-4b63-bbd4-c969caa6139e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b40500b9-3d2a-4052-8e4c-4a2e563d763d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-66ff382a-e701-4003-b37b-744a34ab3500",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-68411459-ebf8-464b-a13b-9623b9f3276e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-877b7393-dd95-4240-8021-ab43a84367f9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ff74f71e-6580-4c7f-b628-9a4a4bf53038",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d3fda489-1ec2-451f-b84d-1ab9996ffe02",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-df3fbaed-cc8b-4766-88b5-99fea3863ba1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d8679d6a-9dd6-4aeb-b18a-8ce18e814365",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4219f8ec-60b4-4443-b060-d585078f53cd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability described here is a type of Cross-Site Scripting (XSS) vulnerability that occurs when untrusted data is included in web pages without proper validation or escaping. In this specific case, the vulnerability arises from displaying unencoded GET/POST/COOKIE values directly in the output. This can allow an attacker to inject malicious scripts into a web page, which can then be executed in the context of the user's browser session.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize input data. Ensure that only expected data types and values are accepted.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use appropriate encoding functions for the context (e.g., HTML, JavaScript, URL).\n3. **Use Security Libraries**: Utilize libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded and executed.\n5. **Regular Security Audits**: Conduct regular security audits and code reviews to identify and fix vulnerabilities.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the provided code snippet, ensure that the input data is properly sanitized and encoded before being used. Here's a revised version of the code:\n\n```php\n// Ensure that the input is properly sanitized and encoded\n$columnField = htmlspecialchars($_REQUEST['column_field'], ENT_QUOTES, 'UTF-8');\n\n// Fetch and encode the data before outputting it\necho json_encode($itemtype::getAllKanbanColumns($columnField));\n```\n\n### Library Dependencies\n\nThe code example provided does not explicitly require any external libraries to execute properly, as it relies on PHP's built-in functions. However, if the `getAllKanbanColumns` method or other parts of the application use specific libraries, those would need to be included separately.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-c1e1171f-2c4f-4b2e-9265-4a78bb500a76",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-da7513a3-c551-4680-a23e-7356ba3a3766",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-61dcf39b-9dce-4397-a4c0-4b91fc33fb75",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a97e5cf2-1ef2-43be-84aa-f386f5fc1fa4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-af00e3d4-1119-4eab-9a9a-9cf255998533",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0ea5087f-574e-4aa1-8756-61a7510debf7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-33e872a9-e4ee-4fbc-b2fa-f3c9b87eef3c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-15113e42-53cb-4d0f-9acf-204c2077394e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-303da246-8342-4359-aef9-9281e2033c44",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7dbd6262-0ed0-40b3-a255-f5f13518be39",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Echoing Unencoded Values from GET/POST/COOKIE\" in PHP arises when user input is directly echoed or outputted to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the given code snippet, the value from `$_REQUEST['items_id']` is directly used in the `echo` statement without any encoding, making it susceptible to XSS attacks.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before outputting it to the browser. Use appropriate encoding functions based on the context in which the data is being used. For HTML content, use `htmlspecialchars()` or `htmlentities()` in PHP to encode special characters.\n\n### Source Code Fix Recommendation\n\nHere's a fixed version of the code snippet that properly encodes the user input:\n\n```php\n<?php\n// Ensure that the 'items_id' parameter is properly encoded before outputting\n$items_id = isset($_REQUEST['items_id']) ? htmlspecialchars($_REQUEST['items_id'], ENT_QUOTES, 'UTF-8') : '';\n\n// Assuming $item is an object with a method getKanbanUrlWithID\necho $item->getKanbanUrlWithID($items_id);\n?>\n```\n\n### Library Dependencies\n\nThe code example does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-14c8917f-3e81-4075-9e11-1b7583ab99c5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-40d79aea-e7e8-4a88-a78c-cf7811ec1ca5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-678bb254-f9bb-40d1-976d-7f87aed49672",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d031dcd1-76e0-43b5-ac62-0deba207ecb2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d5ddeb3e-ed6a-43fa-b98f-445ca947dbd9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Data\" in PHP occurs when user-supplied data is output to a web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the use of `$_REQUEST['items_id']` without proper validation or encoding before being passed to `json_encode` and subsequently output can lead to such vulnerabilities.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that inputs conform to expected formats and types.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use appropriate encoding functions to prevent XSS.\n3. **Use Security Libraries**: Utilize libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to mitigate the impact of XSS by restricting the sources of content that can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the provided code snippet, ensure that the `$_REQUEST['items_id']` is properly validated and encoded before being used:\n\n```php\n// Validate and sanitize the input\n$items_id = filter_input(INPUT_GET, 'items_id', FILTER_VALIDATE_INT);\n\nif ($items_id === false) {\n    // Handle the error appropriately\n    die('Invalid items_id');\n}\n\n// Use the sanitized input\necho json_encode($itemtype::getAllForKanban(true, $items_id));\n```\n\n### Library Dependencies\n\nThe code example requires the following PHP extensions to execute properly:\n\n- `json`: This extension is required for the `json_encode` function.\n- `filter`: This extension is used for input validation with `filter_input`.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-71c7b031-4cff-4392-a57f-283b960317b9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-00956ea6-d75e-4969-a0c2-404aff081533",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-49bb2c22-7769-42a1-a895-a293075bb285",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-902ceea8-11b8-4d94-9115-e9adab56d48e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-20acedd7-c277-4b04-83bb-db1ed417e969",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-141d9f82-1216-405d-925e-e86ac2bd469f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4b0a5673-1ea8-4388-a622-f9d6d0c5e357",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-333715fb-4dd5-47fe-935e-5fe71bda73a7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3d70a655-4514-4d05-a439-be6e4f2d5449",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-15cb4890-6c18-4ea4-b46b-e199a88c20e6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-96a90224-32fe-4bfb-9163-04c4caac0e20",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-98df5620-bd7e-4b51-9cb0-552291380eb0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ff52b1dc-ebcd-4913-9712-02cc76d6765d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c591aaa3-76c4-49c0-9463-5860b94ecb1f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-61465851-754a-4515-ba7a-97ac93f67df6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5c53abf7-ecd5-4bfa-98fa-f4fc4579d640",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7b5f971b-47ec-42cf-86fd-96e94b7f4f3e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9eaccd3d-22a7-48b1-8e39-cf637fd0b9c7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3516b442-4c4c-4a0e-8fa8-8a0eadc2fd2e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-94d529fc-6d85-41b7-913b-c18801f5281d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e8209ebf-a1ff-4569-b6db-76f1b19d792c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Values\" in PHP arises when user input is directly included in the output without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the value from `$_GET['language']` is directly used in `json_encode` without any validation or encoding, making it susceptible to XSS if the input is not properly sanitized.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that inputs conform to expected formats and reject any that do not.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use appropriate encoding functions based on the context (e.g., HTML, JavaScript, JSON).\n3. **Use Security Libraries**: Utilize libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to mitigate the impact of XSS by restricting the sources of content that can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the provided code snippet, ensure that the input is properly validated and encoded before being used. Here's a fixed version of the code:\n\n```php\n<?php\n\n// Assuming AssetDefinition::getPluralFormsForLanguage is a valid function\n// and returns an array or object that can be JSON encoded.\n\nrequire 'vendor/autoload.php'; // Autoload dependencies\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n// Create a request object\n$request = Request::createFromGlobals();\n\n// Get the 'language' parameter from the query string\n$language = $request->query->get('language', 'default_language');\n\n// Validate and sanitize the input\n$language = preg_replace('/[^a-zA-Z0-9_-]/', '', $language);\n\n// Fetch the plural forms for the sanitized language input\n$pluralForms = AssetDefinition::getPluralFormsForLanguage($language);\n\n// Encode the result to JSON\n$response = new Response(json_encode($pluralForms, JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS | JSON_HEX_QUOT));\n\n// Set the content type to application/json\n$response->headers->set('Content-Type', 'application/json');\n\n// Send the response\n$response->send();\n```\n\n### Library Dependencies\n\nTo execute the above code properly, the following library dependencies are required:\n\n- **symfony/http-foundation**: This library is used for handling HTTP requests and responses.\n\nYou can install the required library using Composer:\n\n```bash\ncomposer require symfony/http-foundation\n```\n\n### Relevant Links\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Common Weakness Enumeration: CWE-79](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-098d97b4-ba41-4a5c-ae07-10f7c4e44a17",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0cefbb29-443d-4e91-afb0-b84ef21c480f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-15a86be5-292c-4715-a447-762dc9137969",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-2347d112-7ed5-4148-a67e-2b4ba048a707",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ca80cabb-d254-4196-baf8-a346dd3bdb78",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-82f859eb-5704-4ed7-a964-2658cf62320a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-37c93a09-480b-45fc-a9e8-a92dd5e7dec8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-eb522450-6802-4fe6-9256-3c7a50733be3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-67107b3a-c934-485b-b4d8-5ec2bf52058b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-58b5a0eb-57d1-484f-b890-1ad6dcd820b4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-153f9de3-a1c8-4762-b64e-0d9b045201c3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-63e05a3e-9e98-457b-8574-c69d87e35acb",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b273d066-63b2-45ef-aea0-ed1368dabfd7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-cd6e1c2d-a46a-4f3c-8274-5350b3553842",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ab15f325-17cd-4082-ab2e-44d70cf0d80d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a7559bd9-bf0d-47a6-b236-9ff75f5536e5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-86cea070-3849-4115-a9f3-5be816d9a150",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e289f6b1-2f1e-44ed-b48e-d36fac2e63c0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-68a1a1ff-fcee-4be6-b92a-0aa720ef2b2d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-641627ad-3d8b-4147-b975-66e072ab4a3d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-2a5a427f-e862-442b-b54a-b79914bb330a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ca779554-3c6d-4c73-8d42-e3256737b548",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-633e4d77-4994-4678-bd75-d2009c3ed05c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-75683585-9795-41d9-a098-66614b544303",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-2c758f5d-7f57-427c-939f-ed0279f11100",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0451f34a-a457-43c0-8f53-6642a139446c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1d7265b9-1519-41a0-9ec3-a01ec8fd6b37",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3598562c-b831-4cd4-98b4-47fd32b47f65",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a6a97bfe-c02e-451a-a824-9fb70b9054a3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Data\" in PHP arises when user input from GET, POST, or COOKIE data is directly output to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the `$_POST['field']` data is being used directly in an HTML context without sufficient encoding, making it susceptible to XSS.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before displaying it in the browser. Use appropriate encoding functions based on the context in which the data will be used. For HTML contexts, use `htmlspecialchars()` or a similar function to encode special characters.\n\n### Source Code Fix Recommendation\n\nHere's a fixed version of the provided code snippet:\n\n```php\n<?php\n// Ensure that the htmlescape function is defined to properly escape HTML entities\nfunction htmlescape($data) {\n    return htmlspecialchars($data, ENT_QUOTES, 'UTF-8');\n}\n\n// Use the htmlescape function to encode the POST data\necho \"<input type='hidden' size='25' name='\" . htmlescape($_POST['field']) . \"[alternative_email][]'>\";\n?>\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly. The `htmlspecialchars()` function is a built-in PHP function.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-0a4cea4e-0cf6-48f6-ad46-1bf4ceaaac51",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-dabdd494-5f76-4d18-b85b-71b2b6f46f34",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ce1aacaa-749e-448d-b8f1-628ca317216c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3eb6cee1-1e23-473b-9810-d8ddfaf330bb",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-723a50f2-d7e7-4d50-9ef3-942250fb37fe",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-086e8efc-1bf1-4962-8772-4cff6277c7b2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3bea0a9a-6a16-4c10-ae52-ec89b968f952",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-aabd9c31-4dd7-4602-b80e-29bc8c8f02a1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c4c993cc-7871-4125-b873-f6224c4a614d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d70c56f2-6502-4965-aba6-f05d61e4f30d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9d44fb03-7886-4ac7-abd2-5b5690ed8266",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3aa383cc-a802-4205-aad4-a895192c7982",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-bd94efa7-28a6-44bb-bc76-d76583bb14e8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-892f6e85-8f75-4d73-99eb-65e9d84180b4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a56c997c-fa31-41b2-b26c-09dd8ff0b9f0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8bc75937-bc86-4df4-a1f8-f152e04ae298",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fe447f95-8907-4e14-8322-6cfd5945b2dc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-988b654a-cb7c-4c7a-b060-01f6f91b168b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-72a991c2-9330-4543-aff4-d1e84aae8fb3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e08e997d-0037-470c-9915-d46c33276e78",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f38d7715-fcac-4680-aa13-e4935e024d88",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4d00fe20-d476-4c29-85f7-e97066ccb8e8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-cb13775b-9516-4fc8-8b72-387c30440147",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-735b9a03-f28a-4b0d-90c7-e4eda66fa141",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3f4bdd33-1267-48a6-8729-d7b27ea620da",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-bb22f5fc-c7fb-495e-bba2-f9e52c9e9082",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d5cd4299-d2ce-46fd-bfed-3573e0810903",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-45f3f922-540c-4f76-8f4d-fc13c003f068",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-68fcf1ff-3cbf-4983-b198-10e6b2ca20ed",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-533c84b6-cf3b-4101-ba82-1c0aeb729dbf",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-211df1f5-bb0a-43d1-b800-06d36db08596",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-75ef626f-f271-43ae-995b-1e2dc1df7c18",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-28e2a775-b2d7-4bc5-a598-98cc735af28a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-11eef20b-5d37-4680-ba5a-56a04b3b8690",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-471a893e-e2a0-4daa-93b5-01025eebede2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DisplayPreference.php"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 43,
                  "endLine": 697,
                  "endColumn": 52,
                  "charOffset": 21584,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21584,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21584,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21584,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5c260907-0d9c-478d-9589-68b5f66ec91d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ReservationItem.php"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 16,
                  "endLine": 676,
                  "endColumn": 80,
                  "charOffset": 26027,
                  "charLength": 64,
                  "snippet": {
                    "text": "echo Html::hidden('end', ['value'   => $_POST['reserve'][\"end\"]]",
                    "rendered": {
                      "text": "echo Html::hidden('end', ['value'   => $_POST['reserve'][\"end\"]]",
                      "markdown": "`echo Html::hidden('end', ['value'   => $_POST['reserve'][\"end\"]]`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26027,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('end', ['value'   => htmlentities($_POST['reserve'][\"end\"]])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26027,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('end', ['value'   => rawurlencode($_POST['reserve'][\"end\"]])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-1b5f36d6-2ffe-42b1-8757-76390c7408f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DisplayPreference.php"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 71,
                  "endLine": 697,
                  "endColumn": 80,
                  "charOffset": 21612,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21612,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21612,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21612,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-dd26e39b-8539-48a1-8611-9b8cdca0c7c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DisplayPreference.php"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 30,
                  "endLine": 696,
                  "endColumn": 39,
                  "charOffset": 21510,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-58f4d638-e42b-4cba-8ec8-8db94ff7203c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ReservationItem.php"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 16,
                  "endLine": 675,
                  "endColumn": 82,
                  "charOffset": 25942,
                  "charLength": 66,
                  "snippet": {
                    "text": "echo Html::hidden('begin', ['value' => $_POST['reserve'][\"begin\"]]",
                    "rendered": {
                      "text": "echo Html::hidden('begin', ['value' => $_POST['reserve'][\"begin\"]]",
                      "markdown": "`echo Html::hidden('begin', ['value' => $_POST['reserve'][\"begin\"]]`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25942,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('begin', ['value' => htmlentities($_POST['reserve'][\"begin\"]])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25942,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('begin', ['value' => rawurlencode($_POST['reserve'][\"begin\"]])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c5cf6ab3-2f9a-47b9-a45e-4714ca6898cb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Html.php"
                },
                "region": {
                  "startLine": 2427,
                  "startColumn": 18,
                  "endLine": 2427,
                  "endColumn": 27,
                  "charOffset": 81646,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 81646,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 81646,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 81646,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9f13e5b5-18c2-4e75-9b35-edaba655be7b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Html.php"
                },
                "region": {
                  "startLine": 2427,
                  "startColumn": 45,
                  "endLine": 2427,
                  "endColumn": 54,
                  "charOffset": 81673,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 81673,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 81673,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 81673,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c9216c42-230a-4b52-9594-64d04f7a66ff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Html.php"
                },
                "region": {
                  "startLine": 1659,
                  "startColumn": 45,
                  "endLine": 1659,
                  "endColumn": 54,
                  "charOffset": 56072,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 56072,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 56072,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 56072,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4f52aa70-37a6-47b8-8fd9-c41474a3e3ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Html.php"
                },
                "region": {
                  "startLine": 1659,
                  "startColumn": 18,
                  "endLine": 1659,
                  "endColumn": 27,
                  "charOffset": 56045,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 56045,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 56045,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 56045,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5e8b38cc-396c-48ac-9135-df965f5a2bbe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Html.php"
                },
                "region": {
                  "startLine": 1597,
                  "startColumn": 45,
                  "endLine": 1597,
                  "endColumn": 54,
                  "charOffset": 54056,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54056,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54056,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54056,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-53144bd8-6735-4450-9277-d141d6d6166a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Html.php"
                },
                "region": {
                  "startLine": 1597,
                  "startColumn": 18,
                  "endLine": 1597,
                  "endColumn": 27,
                  "charOffset": 54029,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54029,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54029,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Html.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54029,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e1f6b21b-32d1-49b6-9ed1-30864f43dc2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Item_SoftwareVersion.php"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 54,
                  "endLine": 1072,
                  "endColumn": 63,
                  "charOffset": 41293,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41293,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41293,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41293,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f8e5b228-3727-41fe-a827-ba98421e63be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Item_SoftwareVersion.php"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 25,
                  "endLine": 1072,
                  "endColumn": 34,
                  "charOffset": 41264,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41264,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41264,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41264,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-00b3bc6a-88f5-4592-b045-5d97a31b82dc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Document.php"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 41,
                  "endLine": 317,
                  "endColumn": 50,
                  "charOffset": 10079,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10079,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10079,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10079,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-96965502-eeea-4275-8980-e8de1f9495f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Document.php"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 41,
                  "endLine": 205,
                  "endColumn": 50,
                  "charOffset": 6172,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6172,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6172,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6172,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e6879790-fa79-4f44-89bb-e6adbc6cb32e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Location.php"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 53,
                  "endLine": 515,
                  "endColumn": 62,
                  "charOffset": 16697,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Location.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16697,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Location.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16697,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Location.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16697,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7c873453-b5eb-4e67-ae3d-32f4ff978008",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Location.php"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 25,
                  "endLine": 515,
                  "endColumn": 34,
                  "charOffset": 16669,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Location.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16669,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Location.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16669,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Location.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16669,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-fe9f6c4e-9646-42a7-80d1-bfa8bbb196b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/asset/assetdefinition.php"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 10,
                  "endLine": 62,
                  "endColumn": 19,
                  "charOffset": 2060,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2060,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2060,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2060,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9ff82fd2-5df9-4713-9dc2-b1e6894656fb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/asset/assetdefinition.php"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 4,
                  "endLine": 41,
                  "endColumn": 13,
                  "charOffset": 1320,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e9ea6a8f-039c-415a-8b33-750db9595c99",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/genericdate.php"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 110,
                  "charOffset": 1649,
                  "charLength": 106,
                  "snippet": {
                    "text": "echo \"<input type='hidden' name='\" . htmlescape($_POST['name']) . \"' value='\" . htmlescape($_POST['value']",
                    "rendered": {
                      "text": "echo \"<input type='hidden' name='\" . htmlescape($_POST['name']) . \"' value='\" . htmlescape($_POST['value']",
                      "markdown": "`echo \"<input type='hidden' name='\" . htmlescape($_POST['name']) . \"' value='\" . htmlescape($_POST['value']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/genericdate.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1649,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "echo \"<input type='hidden' name='\" . htmlescape(htmlentities($_POST['name']) . \"' value='\" . htmlescape($_POST['value'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/genericdate.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1649,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "echo \"<input type='hidden' name='\" . htmlescape(rawurlencode($_POST['name']) . \"' value='\" . htmlescape($_POST['value'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-dce4c6a3-ce5e-4579-a496-cd717ed50c89",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 8,
                  "endLine": 65,
                  "endColumn": 17,
                  "charOffset": 1952,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1952,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1952,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1952,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-212a90f1-168e-48ed-9e93-fea9935bec84",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 10,
                  "endLine": 63,
                  "endColumn": 19,
                  "charOffset": 1922,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1922,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1922,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1922,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c1879db1-3a04-4846-ad60-dd5f37c57b48",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 12,
                  "endLine": 62,
                  "endColumn": 21,
                  "charOffset": 1889,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1889,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1889,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1889,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-aaba5271-c05f-4d7b-968e-f969231cc834",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 17,
                  "charOffset": 1761,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1761,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1761,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1761,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-bc0b9422-c89d-44a1-babf-a64b4459ea3f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 26,
                  "endLine": 54,
                  "endColumn": 35,
                  "charOffset": 1697,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1697,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1697,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1697,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-68901be5-3fe0-41ff-8fe9-bd1019015d2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 6,
                  "endLine": 50,
                  "endColumn": 15,
                  "charOffset": 1599,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1599,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1599,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1599,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-68207e2d-3e4e-49d6-ad2a-3f8379e85188",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 8,
                  "endLine": 49,
                  "endColumn": 17,
                  "charOffset": 1557,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1557,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1557,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1557,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-29dc51d4-04b7-457f-a79a-9f4d8cad6a0e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 14,
                  "endLine": 44,
                  "endColumn": 23,
                  "charOffset": 1480,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1480,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1480,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1480,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-aa6560a1-b7b4-41ee-8a02-7879b53f115d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 104,
                  "endLine": 43,
                  "endColumn": 113,
                  "charOffset": 1443,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1443,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1443,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1443,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ebbd3b0f-4c5d-49fe-95b8-5da59f4a78b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 57,
                  "endLine": 43,
                  "endColumn": 66,
                  "charOffset": 1396,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b79e2c03-8eaa-4cc9-b065-a4764957c414",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/central.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "endLine": 43,
                  "endColumn": 21,
                  "charOffset": 1351,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1351,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1351,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/central.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1351,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-16cc980a-9bba-4302-85cf-de45e417adaa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Glpi/Api/HL/Router.php"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 17,
                  "endLine": 589,
                  "endColumn": 26,
                  "charOffset": 22401,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Glpi/Api/HL/Router.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22401,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Glpi/Api/HL/Router.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22401,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Glpi/Api/HL/Router.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22401,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6117939c-7356-42bf-9735-2be18eb0e07d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/cable.php"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 16,
                  "endLine": 87,
                  "endColumn": 76,
                  "charOffset": 3225,
                  "charLength": 60,
                  "snippet": {
                    "text": "echo $_GET['itemtype']::renderDcBreadcrumb($_GET['items_id']",
                    "rendered": {
                      "text": "echo $_GET['itemtype']::renderDcBreadcrumb($_GET['items_id']",
                      "markdown": "`echo $_GET['itemtype']::renderDcBreadcrumb($_GET['items_id']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/cable.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3225,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "echo htmlentities($_GET['itemtype']::renderDcBreadcrumb($_GET['items_id'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/cable.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3225,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "echo rawurlencode($_GET['itemtype']::renderDcBreadcrumb($_GET['items_id'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9d1abe9a-7203-4ccf-afca-09d73a1b39ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 43,
                  "endLine": 248,
                  "endColumn": 52,
                  "charOffset": 7679,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7679,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7679,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7679,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e98279e8-8b50-41dd-853d-0ca8f721148f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 8,
                  "endLine": 248,
                  "endColumn": 61,
                  "charOffset": 7644,
                  "charLength": 53,
                  "snippet": {
                    "text": "echo $grid->getGridItemsHtml(true, $_REQUEST['embed']",
                    "rendered": {
                      "text": "echo $grid->getGridItemsHtml(true, $_REQUEST['embed']",
                      "markdown": "`echo $grid->getGridItemsHtml(true, $_REQUEST['embed']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7644,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "echo $grid->getGridItemsHtml(true, htmlentities($_REQUEST['embed'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7644,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "echo $grid->getGridItemsHtml(true, rawurlencode($_REQUEST['embed'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a1e4638d-28c8-4622-8061-b8c443cadfe3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 34,
                  "endLine": 240,
                  "endColumn": 43,
                  "charOffset": 7445,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7445,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7445,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7445,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b12e0f8e-69bb-4297-bed0-85550e48e38d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 8,
                  "endLine": 240,
                  "endColumn": 56,
                  "charOffset": 7419,
                  "charLength": 48,
                  "snippet": {
                    "text": "echo $grid->getFilterHtml($_REQUEST['filter_id']",
                    "rendered": {
                      "text": "echo $grid->getFilterHtml($_REQUEST['filter_id']",
                      "markdown": "`echo $grid->getFilterHtml($_REQUEST['filter_id']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7419,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "echo $grid->getFilterHtml(htmlentities($_REQUEST['filter_id'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7419,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "echo $grid->getFilterHtml(rawurlencode($_REQUEST['filter_id'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ffebbb65-d4ba-4e77-a591-83e29b6011ad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 38,
                  "endLine": 233,
                  "endColumn": 47,
                  "charOffset": 7228,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7228,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7228,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7228,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c07dd546-c5f3-44f7-a0bb-3e978f82911b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 8,
                  "endLine": 233,
                  "endColumn": 64,
                  "charOffset": 7198,
                  "charLength": 56,
                  "snippet": {
                    "text": "echo $grid->getFiltersSetHtml($_REQUEST['filters'] ?? []",
                    "rendered": {
                      "text": "echo $grid->getFiltersSetHtml($_REQUEST['filters'] ?? []",
                      "markdown": "`echo $grid->getFiltersSetHtml($_REQUEST['filters'] ?? []`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7198,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "echo $grid->getFiltersSetHtml(htmlentities($_REQUEST['filters'] ?? [])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7198,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "echo $grid->getFiltersSetHtml(rawurlencode($_REQUEST['filters'] ?? [])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d1321943-0c17-4e32-9bb3-d03f3abea0b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 33,
                  "endLine": 226,
                  "endColumn": 42,
                  "charOffset": 7013,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7013,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7013,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7013,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0b1fb586-0996-4b06-b8d7-98d88a8f58c8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 54,
                  "endLine": 194,
                  "endColumn": 63,
                  "charOffset": 5859,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5859,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5859,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5859,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-863b52fc-a51a-43b7-91cd-95d8cd74ca25",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 32,
                  "endLine": 194,
                  "endColumn": 41,
                  "charOffset": 5837,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-40e9d5f2-8a2a-4c36-ae3c-d4ab89dcd31c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 8,
                  "endLine": 194,
                  "endColumn": 52,
                  "charOffset": 5813,
                  "charLength": 44,
                  "snippet": {
                    "text": "echo $grid->getCardHtml($_REQUEST['card_id']",
                    "rendered": {
                      "text": "echo $grid->getCardHtml($_REQUEST['card_id']",
                      "markdown": "`echo $grid->getCardHtml($_REQUEST['card_id']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5813,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "echo $grid->getCardHtml(htmlentities($_REQUEST['card_id'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5813,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "echo $grid->getCardHtml(rawurlencode($_REQUEST['card_id'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7351bac9-e8ad-4d46-919d-366d19eb2fb3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 36,
                  "endLine": 192,
                  "endColumn": 45,
                  "charOffset": 5783,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5783,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5783,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5783,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-dfe1135a-2aa7-4c62-a46d-0a39c043a0b3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 33,
                  "endLine": 173,
                  "endColumn": 42,
                  "charOffset": 5258,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5258,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5258,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5258,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-25fd0af6-b51e-4a0b-9b93-da7b091eccda",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 8,
                  "endLine": 149,
                  "endColumn": 17,
                  "charOffset": 4578,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4578,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4578,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4578,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-18cfe9aa-83d5-4491-b59f-87ce341f2631",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 17,
                  "endLine": 145,
                  "endColumn": 26,
                  "charOffset": 4426,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4426,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4426,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4426,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-bb904715-4408-433a-b5e6-8bf56689652c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 8,
                  "endLine": 109,
                  "endColumn": 62,
                  "charOffset": 3330,
                  "charLength": 54,
                  "snippet": {
                    "text": "echo $dashboard->delete(['key' => $_POST['dashboard']]",
                    "rendered": {
                      "text": "echo $dashboard->delete(['key' => $_POST['dashboard']]",
                      "markdown": "`echo $dashboard->delete(['key' => $_POST['dashboard']]`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3330,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "echo $dashboard->delete(['key' => htmlentities($_POST['dashboard']])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3330,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "echo $dashboard->delete(['key' => rawurlencode($_POST['dashboard']])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9074d5d6-4ab3-462f-af43-45a09adf66f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 42,
                  "endLine": 64,
                  "endColumn": 51,
                  "charOffset": 2098,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6c3534f9-c01e-4c1e-8a11-a1ea220c7871",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 22,
                  "charOffset": 1728,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1728,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1728,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1728,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-56e3517f-5fe3-47ce-a6ba-6120ad9d92c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 51,
                  "endLine": 45,
                  "endColumn": 60,
                  "charOffset": 1457,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1457,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1457,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1457,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7bfa7b38-41ed-4f52-bc3d-40f88d5a0990",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 28,
                  "endLine": 45,
                  "endColumn": 37,
                  "charOffset": 1434,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1434,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1434,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1434,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-abda2ad7-f1cc-4e2b-91e6-2f8a422bc159",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dashboard.php"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 11,
                  "endLine": 40,
                  "endColumn": 20,
                  "charOffset": 1305,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1305,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1305,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dashboard.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1305,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9ece3211-5795-461c-afb7-f391448d3d4b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "front/asset/asset.form.php"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 28,
                  "endLine": 48,
                  "endColumn": 37,
                  "charOffset": 1506,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1506,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1506,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1506,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c18a4450-b82e-421a-88a0-ef45f227129e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "front/asset/asset.form.php"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 57,
                  "endLine": 47,
                  "endColumn": 66,
                  "charOffset": 1458,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-063f0e90-f3e9-40f7-be7f-2148508e72a6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "front/asset/asset.form.php"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 27,
                  "endLine": 47,
                  "endColumn": 36,
                  "charOffset": 1428,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1428,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1428,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/asset/asset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1428,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-2e34d559-e03a-46cf-9f14-659f51d81c96",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/webhook.php"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 8,
                  "endLine": 171,
                  "endColumn": 72,
                  "charOffset": 6054,
                  "charLength": 64,
                  "snippet": {
                    "text": "echo json_encode(Webhook::getMonacoSuggestions($_GET['itemtype']",
                    "rendered": {
                      "text": "echo json_encode(Webhook::getMonacoSuggestions($_GET['itemtype']",
                      "markdown": "`echo json_encode(Webhook::getMonacoSuggestions($_GET['itemtype']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/webhook.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6054,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "echo json_encode(Webhook::getMonacoSuggestions(htmlentities($_GET['itemtype'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/webhook.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6054,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "echo json_encode(Webhook::getMonacoSuggestions(rawurlencode($_GET['itemtype'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c495ac11-f833-4e34-995e-cab77cad2659",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/webhook.php"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 19,
                  "charOffset": 1459,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/webhook.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1459,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/webhook.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1459,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/webhook.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1459,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-161778dd-fd1a-4dbf-bdf9-a129fb8c2c24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "front/form/form.form.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 14,
                  "charOffset": 1325,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/form.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1325,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/form.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1325,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/form.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1325,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f4ea316f-13cc-46dc-8ca1-95f8035b5fa0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "front/form/form.form.php"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 6,
                  "endLine": 41,
                  "endColumn": 15,
                  "charOffset": 1294,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/form.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1294,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/form.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1294,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/form.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1294,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-91927349-81bd-41bf-a1f2-a1f2a7b5f733",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/domainrecord_data_form.php"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 69,
                  "endLine": 46,
                  "endColumn": 78,
                  "charOffset": 1502,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1502,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1502,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1502,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-fd01dbc9-d92c-4608-ab8f-9c3f39a10f00",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/domainrecord_data_form.php"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 36,
                  "endLine": 46,
                  "endColumn": 45,
                  "charOffset": 1469,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9f246872-e027-4f56-b440-f2a6b2452276",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/domainrecord_data_form.php"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "endLine": 40,
                  "endColumn": 55,
                  "charOffset": 1308,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1308,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1308,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1308,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-8e3a8987-a60f-4b4c-9717-0a5737b40afd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/domainrecord_data_form.php"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 37,
                  "endLine": 41,
                  "endColumn": 46,
                  "charOffset": 1356,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1356,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1356,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/domainrecord_data_form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1356,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6a0c185c-5e8b-45fc-9c87-8156c486f389",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "front/form/answersset.form.php"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 6,
                  "endLine": 42,
                  "endColumn": 15,
                  "charOffset": 1320,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/answersset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/answersset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "front/form/answersset.form.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-56f72a6f-f3d8-4768-ae5f-c933c3edf4aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/marketplace.php"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 4,
                  "endLine": 79,
                  "endColumn": 50,
                  "charOffset": 2620,
                  "charLength": 46,
                  "snippet": {
                    "text": "echo MarketplaceView::getButtons($_POST['key']",
                    "rendered": {
                      "text": "echo MarketplaceView::getButtons($_POST['key']",
                      "markdown": "`echo MarketplaceView::getButtons($_POST['key']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/marketplace.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2620,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "echo MarketplaceView::getButtons(htmlentities($_POST['key'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/marketplace.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2620,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "echo MarketplaceView::getButtons(rawurlencode($_POST['key'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5c4877b6-55c3-4537-8a9b-5fa3e28d248e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/marketplace.php"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 59,
                  "charOffset": 1367,
                  "charLength": 55,
                  "snippet": {
                    "text": "echo $_SESSION['marketplace_dl_progress'][$_GET['key']]",
                    "rendered": {
                      "text": "echo $_SESSION['marketplace_dl_progress'][$_GET['key']]",
                      "markdown": "`echo $_SESSION['marketplace_dl_progress'][$_GET['key']]`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/marketplace.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1367,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "echo $_SESSION['marketplace_dl_progress'][htmlentities($_GET['key']])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/marketplace.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1367,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "echo $_SESSION['marketplace_dl_progress'][rawurlencode($_GET['key']])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-fc0d5667-890e-434c-b0fd-e3ac8cc40133",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dropdownLocation.php"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 27,
                  "endLine": 54,
                  "endColumn": 36,
                  "charOffset": 1752,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1752,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1752,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1752,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b4d7f4a1-3e70-4614-af7e-b02a32dfcf74",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dropdownLocation.php"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 19,
                  "charOffset": 1695,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1695,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1695,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1695,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4b499f55-d442-4407-bfdf-4f5c36fbbcdd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dropdownLocation.php"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 23,
                  "endLine": 46,
                  "endColumn": 32,
                  "charOffset": 1469,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d264fc87-4eed-4a64-a21c-334a36b44dc3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dropdownLocation.php"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 27,
                  "endLine": 45,
                  "endColumn": 36,
                  "charOffset": 1422,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1422,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1422,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1422,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ec92c470-ded0-411d-ae60-7ccaf50f9c53",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dropdownLocation.php"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 23,
                  "endLine": 40,
                  "endColumn": 32,
                  "charOffset": 1275,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1275,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1275,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1275,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-37f87741-ab2c-4974-b18e-25ab3eb2a068",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dropdownLocation.php"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 11,
                  "endLine": 39,
                  "endColumn": 20,
                  "charOffset": 1229,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1229,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1229,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dropdownLocation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1229,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-70f399a7-180b-4499-bda0-cc71166c10c2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tools/update_registered_ids.php"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 18,
                  "endLine": 50,
                  "endColumn": 42,
                  "charOffset": 1549,
                  "charLength": 24,
                  "snippet": {
                    "text": "http://www.linux-usb.org",
                    "rendered": {
                      "text": "http://www.linux-usb.org",
                      "markdown": "`http://www.linux-usb.org`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "tools/update_registered_ids.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1549,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "https://www.linux-usb.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-06264541-76dd-4131-bfad-2afb64355c82",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tools/update_registered_ids.php"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 15,
                  "endLine": 49,
                  "endColumn": 44,
                  "charOffset": 1486,
                  "charLength": 29,
                  "snippet": {
                    "text": "http://pciids.sourceforge.net",
                    "rendered": {
                      "text": "http://pciids.sourceforge.net",
                      "markdown": "`http://pciids.sourceforge.net`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "tools/update_registered_ids.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1486,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "https://pciids.sourceforge.net"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-dbee0de4-ac6a-4aee-aec3-b360d8bd750e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/mailcollector.php"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 47,
                  "endLine": 71,
                  "endColumn": 56,
                  "charOffset": 2403,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2403,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2403,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2403,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e482649e-f485-4778-be32-eb2f5278e81e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/mailcollector.php"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 21,
                  "endLine": 52,
                  "endColumn": 30,
                  "charOffset": 1716,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-8aaa93bc-df1d-4ba9-bfe0-70ad1ecbb20c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/mailcollector.php"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 42,
                  "endLine": 48,
                  "endColumn": 51,
                  "charOffset": 1615,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1615,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1615,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1615,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-cc047f94-1303-4da8-8544-ca5bd8d25bf3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/mailcollector.php"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 39,
                  "endLine": 47,
                  "endColumn": 48,
                  "charOffset": 1559,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1559,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1559,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1559,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-089e6553-afe6-4b7d-a391-713c52b8db9f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/mailcollector.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "endLine": 43,
                  "endColumn": 21,
                  "charOffset": 1369,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1369,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1369,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1369,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-afd73770-1461-4a4d-9b97-bc5c77a22514",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/mailcollector.php"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 19,
                  "charOffset": 1333,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1333,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1333,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/mailcollector.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1333,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-90b8db88-ff66-4eb4-b6aa-35ae02025e80",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Auth.php"
                },
                "region": {
                  "startLine": 1532,
                  "startColumn": 19,
                  "endLine": 1532,
                  "endColumn": 28,
                  "charOffset": 57069,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 57069,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 57069,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 57069,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-94e8ec8e-d662-463c-b339-b68702b3ed24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Auth.php"
                },
                "region": {
                  "startLine": 1085,
                  "startColumn": 90,
                  "endLine": 1085,
                  "endColumn": 99,
                  "charOffset": 42265,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 42265,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 42265,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 42265,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-1337dc81-09e5-47f7-8020-f9a4b804072a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Auth.php"
                },
                "region": {
                  "startLine": 1464,
                  "startColumn": 19,
                  "endLine": 1464,
                  "endColumn": 28,
                  "charOffset": 54797,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54797,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54797,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54797,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f923a7f5-f8e6-4e7e-aa5e-9f78c73100ca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Auth.php"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 48,
                  "endLine": 661,
                  "endColumn": 57,
                  "charOffset": 23113,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23113,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23113,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 23113,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-8e6a2650-68f0-4b97-99fc-6d4059004c74",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Auth.php"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 36,
                  "endLine": 608,
                  "endColumn": 61,
                  "charOffset": 20506,
                  "charLength": 25,
                  "snippet": {
                    "text": "http://www.egroupware.org",
                    "rendered": {
                      "text": "http://www.egroupware.org",
                      "markdown": "`http://www.egroupware.org`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Auth.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20506,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "https://www.egroupware.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-0cea76f9-fa92-426d-998d-05228b05176f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/rack.php"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 11,
                  "endLine": 45,
                  "endColumn": 20,
                  "charOffset": 1469,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/rack.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/rack.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/rack.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1469,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-712bb51d-56b7-4b63-bbd4-c969caa6139e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 53,
                  "endLine": 324,
                  "endColumn": 62,
                  "charOffset": 13467,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13467,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13467,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13467,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b40500b9-3d2a-4052-8e4c-4a2e563d763d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 11,
                  "endLine": 323,
                  "endColumn": 20,
                  "charOffset": 13355,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13355,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13355,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13355,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-66ff382a-e701-4003-b37b-744a34ab3500",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 11,
                  "endLine": 313,
                  "endColumn": 20,
                  "charOffset": 12901,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12901,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12901,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12901,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-68411459-ebf8-464b-a13b-9623b9f3276e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 48,
                  "endLine": 282,
                  "endColumn": 57,
                  "charOffset": 11409,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11409,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11409,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11409,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-877b7393-dd95-4240-8021-ab43a84367f9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 65,
                  "endLine": 276,
                  "endColumn": 74,
                  "charOffset": 11035,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11035,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11035,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11035,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ff74f71e-6580-4c7f-b628-9a4a4bf53038",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 93,
                  "endLine": 276,
                  "endColumn": 102,
                  "charOffset": 11063,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11063,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11063,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11063,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d3fda489-1ec2-451f-b84d-1ab9996ffe02",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 42,
                  "endLine": 276,
                  "endColumn": 51,
                  "charOffset": 11012,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11012,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11012,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11012,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-df3fbaed-cc8b-4766-88b5-99fea3863ba1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 10,
                  "endLine": 272,
                  "endColumn": 19,
                  "charOffset": 10775,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10775,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10775,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10775,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d8679d6a-9dd6-4aeb-b18a-8ce18e814365",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 52,
                  "endLine": 271,
                  "endColumn": 61,
                  "charOffset": 10736,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10736,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10736,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10736,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4219f8ec-60b4-4443-b060-d585078f53cd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 4,
                  "endLine": 271,
                  "endColumn": 77,
                  "charOffset": 10688,
                  "charLength": 73,
                  "snippet": {
                    "text": "echo json_encode($itemtype::getAllKanbanColumns($_REQUEST['column_field']",
                    "rendered": {
                      "text": "echo json_encode($itemtype::getAllKanbanColumns($_REQUEST['column_field']",
                      "markdown": "`echo json_encode($itemtype::getAllKanbanColumns($_REQUEST['column_field']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10688,
                        "charLength": 73
                      },
                      "insertedContent": {
                        "text": "echo json_encode($itemtype::getAllKanbanColumns(htmlentities($_REQUEST['column_field'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10688,
                        "charLength": 73
                      },
                      "insertedContent": {
                        "text": "echo json_encode($itemtype::getAllKanbanColumns(rawurlencode($_REQUEST['column_field'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c1e1171f-2c4f-4b2e-9265-4a78bb500a76",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 10,
                  "endLine": 268,
                  "endColumn": 19,
                  "charOffset": 10539,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10539,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10539,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10539,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-da7513a3-c551-4680-a23e-7356ba3a3766",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 68,
                  "endLine": 262,
                  "endColumn": 77,
                  "charOffset": 10428,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10428,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10428,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10428,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-61dcf39b-9dce-4397-a4c0-4b91fc33fb75",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 45,
                  "endLine": 262,
                  "endColumn": 54,
                  "charOffset": 10405,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a97e5cf2-1ef2-43be-84aa-f386f5fc1fa4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 10,
                  "endLine": 260,
                  "endColumn": 19,
                  "charOffset": 10280,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-af00e3d4-1119-4eab-9a9a-9cf255998533",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 99,
                  "endLine": 256,
                  "endColumn": 108,
                  "charOffset": 10132,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10132,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10132,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10132,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0ea5087f-574e-4aa1-8756-61a7510debf7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 76,
                  "endLine": 256,
                  "endColumn": 85,
                  "charOffset": 10109,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10109,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10109,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10109,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-33e872a9-e4ee-4fbc-b2fa-f3c9b87eef3c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 53,
                  "endLine": 256,
                  "endColumn": 62,
                  "charOffset": 10086,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10086,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10086,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10086,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-15113e42-53cb-4d0f-9acf-204c2077394e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 10,
                  "endLine": 252,
                  "endColumn": 19,
                  "charOffset": 9856,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9856,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9856,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9856,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-303da246-8342-4359-aef9-9281e2033c44",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 35,
                  "endLine": 227,
                  "endColumn": 44,
                  "charOffset": 8641,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8641,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8641,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8641,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7dbd6262-0ed0-40b3-a255-f5f13518be39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 4,
                  "endLine": 227,
                  "endColumn": 56,
                  "charOffset": 8610,
                  "charLength": 52,
                  "snippet": {
                    "text": "echo $item->getKanbanUrlWithID($_REQUEST['items_id']",
                    "rendered": {
                      "text": "echo $item->getKanbanUrlWithID($_REQUEST['items_id']",
                      "markdown": "`echo $item->getKanbanUrlWithID($_REQUEST['items_id']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8610,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "echo $item->getKanbanUrlWithID(htmlentities($_REQUEST['items_id'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8610,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "echo $item->getKanbanUrlWithID(rawurlencode($_REQUEST['items_id'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-14c8917f-3e81-4075-9e11-1b7583ab99c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 21,
                  "endLine": 226,
                  "endColumn": 30,
                  "charOffset": 8582,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8582,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8582,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8582,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-40d79aea-e7e8-4a88-a78c-cf7811ec1ca5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 8,
                  "endLine": 222,
                  "endColumn": 17,
                  "charOffset": 8458,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-678bb254-f9bb-40d1-976d-7f87aed49672",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 10,
                  "endLine": 220,
                  "endColumn": 19,
                  "charOffset": 8381,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8381,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8381,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8381,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d031dcd1-76e0-43b5-ac62-0deba207ecb2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 61,
                  "endLine": 219,
                  "endColumn": 70,
                  "charOffset": 8339,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8339,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8339,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8339,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d5ddeb3e-ed6a-43fa-b98f-445ca947dbd9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 4,
                  "endLine": 219,
                  "endColumn": 82,
                  "charOffset": 8282,
                  "charLength": 78,
                  "snippet": {
                    "text": "echo json_encode($itemtype::getAllForKanban(true, (int) ($_REQUEST['items_id']",
                    "rendered": {
                      "text": "echo json_encode($itemtype::getAllForKanban(true, (int) ($_REQUEST['items_id']",
                      "markdown": "`echo json_encode($itemtype::getAllForKanban(true, (int) ($_REQUEST['items_id']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8282,
                        "charLength": 78
                      },
                      "insertedContent": {
                        "text": "echo json_encode($itemtype::getAllForKanban(true, (int) (htmlentities($_REQUEST['items_id'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8282,
                        "charLength": 78
                      },
                      "insertedContent": {
                        "text": "echo json_encode($itemtype::getAllForKanban(true, (int) (rawurlencode($_REQUEST['items_id'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-71c7b031-4cff-4392-a57f-283b960317b9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 19,
                  "endLine": 215,
                  "endColumn": 28,
                  "charOffset": 8123,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8123,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8123,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8123,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-00956ea6-d75e-4969-a0c2-404aff081533",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 10,
                  "endLine": 217,
                  "endColumn": 19,
                  "charOffset": 8170,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8170,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8170,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8170,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-49bb2c22-7769-42a1-a895-a293075bb285",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 10,
                  "endLine": 212,
                  "endColumn": 19,
                  "charOffset": 7945,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7945,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7945,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7945,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-902ceea8-11b8-4d94-9115-e9adab56d48e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 66,
                  "endLine": 210,
                  "endColumn": 75,
                  "charOffset": 7834,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7834,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7834,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7834,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-20acedd7-c277-4b04-83bb-db1ed417e969",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 64,
                  "endLine": 209,
                  "endColumn": 73,
                  "charOffset": 7744,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7744,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7744,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7744,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-141d9f82-1216-405d-925e-e86ac2bd469f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 43,
                  "endLine": 210,
                  "endColumn": 52,
                  "charOffset": 7811,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7811,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7811,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7811,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4b0a5673-1ea8-4388-a622-f9d6d0c5e357",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 10,
                  "endLine": 205,
                  "endColumn": 19,
                  "charOffset": 7495,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7495,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7495,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7495,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-333715fb-4dd5-47fe-935e-5fe71bda73a7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 19,
                  "endLine": 119,
                  "endColumn": 28,
                  "charOffset": 4184,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4184,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4184,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4184,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3d70a655-4514-4d05-a439-be6e4f2d5449",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 90,
                  "endLine": 88,
                  "endColumn": 99,
                  "charOffset": 3167,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3167,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3167,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3167,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-15cb4890-6c18-4ea4-b46b-e199a88c20e6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 25,
                  "endLine": 87,
                  "endColumn": 34,
                  "charOffset": 3053,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3053,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3053,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3053,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-96a90224-32fe-4bfb-9163-04c4caac0e20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 24,
                  "endLine": 81,
                  "endColumn": 33,
                  "charOffset": 2824,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2824,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2824,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2824,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-98df5620-bd7e-4b51-9cb0-552291380eb0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 34,
                  "endLine": 69,
                  "endColumn": 43,
                  "charOffset": 2424,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2424,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ff52b1dc-ebcd-4913-9712-02cc76d6765d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 4,
                  "endLine": 69,
                  "endColumn": 13,
                  "charOffset": 2394,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2394,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2394,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2394,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c591aaa3-76c4-49c0-9463-5860b94ecb1f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 10,
                  "endLine": 68,
                  "endColumn": 19,
                  "charOffset": 2364,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-61465851-754a-4515-ba7a-97ac93f67df6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 16,
                  "endLine": 64,
                  "endColumn": 25,
                  "charOffset": 2285,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2285,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2285,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2285,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5c53abf7-ecd5-4bfa-98fa-f4fc4579d640",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 81,
                  "endLine": 58,
                  "endColumn": 90,
                  "charOffset": 1981,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1981,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1981,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1981,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7b5f971b-47ec-42cf-86fd-96e94b7f4f3e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 18,
                  "endLine": 58,
                  "endColumn": 27,
                  "charOffset": 1918,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1918,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1918,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1918,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9eaccd3d-22a7-48b1-8e39-cf637fd0b9c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 10,
                  "endLine": 57,
                  "endColumn": 19,
                  "charOffset": 1874,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3516b442-4c4c-4a0e-8fa8-8a0eadc2fd2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 19,
                  "charOffset": 1615,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1615,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1615,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1615,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-94d529fc-6d85-41b7-913b-c18801f5281d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/kanban.php"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "endLine": 46,
                  "endColumn": 20,
                  "charOffset": 1512,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1512,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1512,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/kanban.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1512,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e8209ebf-a1ff-4569-b6db-76f1b19d792c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getPlurals.php"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "endColumn": 77,
                  "charOffset": 1326,
                  "charLength": 77,
                  "snippet": {
                    "text": "echo json_encode(AssetDefinition::getPluralFormsForLanguage($_GET['language']",
                    "rendered": {
                      "text": "echo json_encode(AssetDefinition::getPluralFormsForLanguage($_GET['language']",
                      "markdown": "`echo json_encode(AssetDefinition::getPluralFormsForLanguage($_GET['language']`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getPlurals.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1326,
                        "charLength": 77
                      },
                      "insertedContent": {
                        "text": "echo json_encode(AssetDefinition::getPluralFormsForLanguage(htmlentities($_GET['language'])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getPlurals.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1326,
                        "charLength": 77
                      },
                      "insertedContent": {
                        "text": "echo json_encode(AssetDefinition::getPluralFormsForLanguage(rawurlencode($_GET['language'])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-098d97b4-ba41-4a5c-ae07-10f7c4e44a17",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 36,
                  "endLine": 117,
                  "endColumn": 45,
                  "charOffset": 3828,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3828,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3828,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3828,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0cefbb29-443d-4e91-afb0-b84ef21c480f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 41,
                  "endLine": 113,
                  "endColumn": 50,
                  "charOffset": 3730,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3730,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3730,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3730,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-15a86be5-292c-4715-a447-762dc9137969",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 36,
                  "endLine": 109,
                  "endColumn": 45,
                  "charOffset": 3622,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3622,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3622,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3622,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-2347d112-7ed5-4148-a67e-2b4ba048a707",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 36,
                  "endLine": 99,
                  "endColumn": 45,
                  "charOffset": 3329,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3329,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3329,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3329,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ca80cabb-d254-4196-baf8-a346dd3bdb78",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 37,
                  "endLine": 104,
                  "endColumn": 46,
                  "charOffset": 3477,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3477,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3477,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3477,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-82f859eb-5704-4ed7-a964-2658cf62320a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 32,
                  "endLine": 94,
                  "endColumn": 41,
                  "charOffset": 3183,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3183,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3183,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3183,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-37c93a09-480b-45fc-a9e8-a92dd5e7dec8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 8,
                  "endLine": 92,
                  "endColumn": 17,
                  "charOffset": 3099,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3099,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3099,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3099,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-eb522450-6802-4fe6-9256-3c7a50733be3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 27,
                  "endLine": 87,
                  "endColumn": 36,
                  "charOffset": 3041,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3041,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3041,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3041,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-67107b3a-c934-485b-b4d8-5ec2bf52058b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 40,
                  "endLine": 77,
                  "endColumn": 49,
                  "charOffset": 2766,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2766,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2766,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2766,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-58b5a0eb-57d1-484f-b890-1ad6dcd820b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 68,
                  "endLine": 64,
                  "endColumn": 77,
                  "charOffset": 2018,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2018,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2018,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2018,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-153f9de3-a1c8-4762-b64e-0d9b045201c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 57,
                  "endLine": 64,
                  "endColumn": 66,
                  "charOffset": 2007,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-63e05a3e-9e98-457b-8574-c69d87e35acb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 18,
                  "endLine": 61,
                  "endColumn": 27,
                  "charOffset": 1886,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1886,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1886,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1886,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b273d066-63b2-45ef-aea0-ed1368dabfd7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 62,
                  "endColumn": 23,
                  "charOffset": 1927,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1927,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1927,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1927,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-cd6e1c2d-a46a-4f3c-8274-5350b3553842",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 29,
                  "charOffset": 1713,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1713,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1713,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1713,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ab15f325-17cd-4082-ab2e-44d70cf0d80d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 19,
                  "endLine": 50,
                  "endColumn": 28,
                  "charOffset": 1552,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1552,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1552,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1552,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a7559bd9-bf0d-47a6-b236-9ff75f5536e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "endLine": 43,
                  "endColumn": 20,
                  "charOffset": 1411,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1411,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1411,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1411,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-86cea070-3849-4115-a9f3-5be816d9a150",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/search.php"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 8,
                  "endLine": 48,
                  "endColumn": 17,
                  "charOffset": 1482,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1482,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1482,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/search.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1482,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e289f6b1-2f1e-44ed-b48e-d36fac2e63c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 27,
                  "endLine": 126,
                  "endColumn": 36,
                  "charOffset": 3677,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3677,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3677,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3677,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-68a1a1ff-fcee-4be6-b92a-0aa720ef2b2d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 27,
                  "endLine": 125,
                  "endColumn": 36,
                  "charOffset": 3632,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3632,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3632,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3632,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-641627ad-3d8b-4147-b975-66e072ab4a3d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 27,
                  "endLine": 124,
                  "endColumn": 36,
                  "charOffset": 3586,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-2a5a427f-e862-442b-b54a-b79914bb330a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 25,
                  "endLine": 112,
                  "endColumn": 34,
                  "charOffset": 3186,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ca779554-3c6d-4c73-8d42-e3256737b548",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 35,
                  "endLine": 103,
                  "endColumn": 44,
                  "charOffset": 2895,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2895,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2895,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2895,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-633e4d77-4994-4678-bd75-d2009c3ed05c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 8,
                  "endLine": 103,
                  "endColumn": 17,
                  "charOffset": 2868,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2868,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2868,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2868,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-75683585-9795-41d9-a098-66614b544303",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 8,
                  "endLine": 101,
                  "endColumn": 17,
                  "charOffset": 2823,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2823,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2823,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2823,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-2c758f5d-7f57-427c-939f-ed0279f11100",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 15,
                  "endLine": 100,
                  "endColumn": 24,
                  "charOffset": 2793,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2793,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2793,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2793,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0451f34a-a457-43c0-8f53-6642a139446c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 10,
                  "endLine": 80,
                  "endColumn": 19,
                  "charOffset": 2266,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2266,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2266,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2266,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-1d7265b9-1519-41a0-9ec3-a01ec8fd6b37",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/savedsearch.php"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 11,
                  "endLine": 76,
                  "endColumn": 20,
                  "charOffset": 2217,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2217,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2217,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/savedsearch.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2217,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3598562c-b831-4cd4-98b4-47fd32b47f65",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/RuleCollection.php"
                },
                "region": {
                  "startLine": 1348,
                  "startColumn": 43,
                  "endLine": 1348,
                  "endColumn": 52,
                  "charOffset": 47458,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/RuleCollection.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/RuleCollection.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/RuleCollection.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47458,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a6a97bfe-c02e-451a-a824-9fb70b9054a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/uemailUpdate.php"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 107,
                  "charOffset": 3279,
                  "charLength": 99,
                  "snippet": {
                    "text": "echo \"<input type='hidden' size='25' name='\" . htmlescape($_POST['field']) . \"[alternative_email][]",
                    "rendered": {
                      "text": "echo \"<input type='hidden' size='25' name='\" . htmlescape($_POST['field']) . \"[alternative_email][]",
                      "markdown": "`echo \"<input type='hidden' size='25' name='\" . htmlescape($_POST['field']) . \"[alternative_email][]`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/uemailUpdate.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3279,
                        "charLength": 99
                      },
                      "insertedContent": {
                        "text": "echo \"<input type='hidden' size='25' name='\" . htmlescape(htmlentities($_POST['field']) . \"[alternative_email][])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/uemailUpdate.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3279,
                        "charLength": 99
                      },
                      "insertedContent": {
                        "text": "echo \"<input type='hidden' size='25' name='\" . htmlescape(rawurlencode($_POST['field']) . \"[alternative_email][])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0a4cea4e-0cf6-48f6-ad46-1bf4ceaaac51",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dcroom_size.php"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 8,
                  "endLine": 44,
                  "endColumn": 17,
                  "charOffset": 1382,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1382,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1382,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1382,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-dabdd494-5f76-4d18-b85b-71b2b6f46f34",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dcroom_size.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "endLine": 43,
                  "endColumn": 20,
                  "charOffset": 1344,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1344,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1344,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1344,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ce1aacaa-749e-448d-b8f1-628ca317216c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dcroom_size.php"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 6,
                  "endLine": 42,
                  "endColumn": 15,
                  "charOffset": 1316,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1316,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1316,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1316,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3eb6cee1-1e23-473b-9810-d8ddfaf330bb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/dcroom_size.php"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 20,
                  "charOffset": 1224,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1224,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1224,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/dcroom_size.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1224,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-723a50f2-d7e7-4d50-9ef3-942250fb37fe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 44,
                  "endLine": 75,
                  "endColumn": 53,
                  "charOffset": 2582,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2582,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2582,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2582,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-086e8efc-1bf1-4962-8772-4cff6277c7b2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 31,
                  "charOffset": 2560,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2560,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2560,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2560,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3bea0a9a-6a16-4c10-ae52-ec89b968f952",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 36,
                  "endLine": 73,
                  "endColumn": 45,
                  "charOffset": 2496,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2496,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2496,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2496,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-aabd9c31-4dd7-4602-b80e-29bc8c8f02a1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 36,
                  "endLine": 72,
                  "endColumn": 45,
                  "charOffset": 2441,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2441,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2441,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2441,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c4c993cc-7871-4125-b873-f6224c4a614d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 36,
                  "endLine": 71,
                  "endColumn": 45,
                  "charOffset": 2386,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2386,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2386,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2386,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d70c56f2-6502-4965-aba6-f05d61e4f30d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 44,
                  "endLine": 63,
                  "endColumn": 53,
                  "charOffset": 1976,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9d44fb03-7886-4ac7-abd2-5b5690ed8266",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 22,
                  "endLine": 63,
                  "endColumn": 31,
                  "charOffset": 1954,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1954,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1954,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1954,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3aa383cc-a802-4205-aad4-a895192c7982",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 48,
                  "endLine": 62,
                  "endColumn": 57,
                  "charOffset": 1904,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1904,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1904,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1904,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-bd94efa7-28a6-44bb-bc76-d76583bb14e8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 9,
                  "endLine": 60,
                  "endColumn": 18,
                  "charOffset": 1781,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1781,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1781,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1781,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-892f6e85-8f75-4d73-99eb-65e9d84180b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 4,
                  "endLine": 54,
                  "endColumn": 13,
                  "charOffset": 1702,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1702,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1702,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1702,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a56c997c-fa31-41b2-b26c-09dd8ff0b9f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 11,
                  "endLine": 53,
                  "endColumn": 20,
                  "charOffset": 1669,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1669,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1669,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1669,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-8bc75937-bc86-4df4-a1f8-f152e04ae298",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 13,
                  "charOffset": 1627,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1627,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1627,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1627,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-fe447f95-8907-4e14-8322-6cfd5945b2dc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 11,
                  "endLine": 49,
                  "endColumn": 20,
                  "charOffset": 1601,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1601,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1601,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1601,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-988b654a-cb7c-4c7a-b060-01f6f91b168b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 37,
                  "endLine": 47,
                  "endColumn": 46,
                  "charOffset": 1565,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1565,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1565,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1565,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-72a991c2-9330-4543-aff4-d1e84aae8fb3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "endColumn": 9,
                  "charOffset": 1528,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1528,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1528,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1528,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e08e997d-0037-470c-9915-d46c33276e78",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 29,
                  "endLine": 44,
                  "endColumn": 38,
                  "charOffset": 1501,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1501,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1501,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1501,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f38d7715-fcac-4680-aa13-e4935e024d88",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 44,
                  "endColumn": 13,
                  "charOffset": 1476,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1476,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1476,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1476,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4d00fe20-d476-4c29-85f7-e97066ccb8e8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 20,
                  "endLine": 43,
                  "endColumn": 29,
                  "charOffset": 1446,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1446,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1446,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1446,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-cb13775b-9516-4fc8-8b72-387c30440147",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/getUserPicture.php"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 11,
                  "endLine": 41,
                  "endColumn": 20,
                  "charOffset": 1331,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1331,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1331,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/getUserPicture.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1331,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-735b9a03-f28a-4b0d-90c7-e4eda66fa141",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 52,
                  "endLine": 75,
                  "endColumn": 61,
                  "charOffset": 2678,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3f4bdd33-1267-48a6-8729-d7b27ea620da",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 25,
                  "endLine": 75,
                  "endColumn": 34,
                  "charOffset": 2651,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2651,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2651,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2651,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-bb22f5fc-c7fb-495e-bba2-f9e52c9e9082",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 29,
                  "charOffset": 1902,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1902,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1902,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1902,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d5cd4299-d2ce-46fd-bfed-3573e0810903",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 36,
                  "endLine": 52,
                  "endColumn": 45,
                  "charOffset": 1844,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1844,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1844,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1844,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-45f3f922-540c-4f76-8f4d-fc13c003f068",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 36,
                  "endLine": 51,
                  "endColumn": 45,
                  "charOffset": 1782,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-68fcf1ff-3cbf-4983-b198-10e6b2ca20ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 36,
                  "endLine": 49,
                  "endColumn": 45,
                  "charOffset": 1662,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1662,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1662,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1662,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-533c84b6-cf3b-4101-ba82-1c0aeb729dbf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 36,
                  "endLine": 50,
                  "endColumn": 45,
                  "charOffset": 1721,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1721,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1721,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1721,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-211df1f5-bb0a-43d1-b800-06d36db08596",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 36,
                  "endLine": 45,
                  "endColumn": 45,
                  "charOffset": 1481,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-75ef626f-f271-43ae-995b-1e2dc1df7c18",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 8,
                  "endLine": 41,
                  "endColumn": 17,
                  "charOffset": 1321,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1321,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1321,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1321,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-28e2a775-b2d7-4bc5-a598-98cc735af28a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/treebrowse.php"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 36,
                  "endLine": 44,
                  "endColumn": 45,
                  "charOffset": 1425,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1425,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1425,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/treebrowse.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1425,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-11eef20b-5d37-4680-ba5a-56a04b3b8690",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/timeline.php"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 90,
                  "endLine": 127,
                  "endColumn": 99,
                  "charOffset": 4656,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/timeline.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4656,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/timeline.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4656,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/timeline.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4656,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}