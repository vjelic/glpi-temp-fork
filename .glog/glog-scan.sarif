{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-f0be9de3-7258-4f13-97a0-2bd04452b6b4",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2025-30693** affects the `oci/mariadb@11.4` package in the OSS programming language. This vulnerability is a result of improper input validation in the database query handling mechanism, which could allow an attacker to execute arbitrary SQL commands. The flaw arises from insufficient sanitization of user inputs, leading to potential SQL injection attacks. This could compromise the confidentiality, integrity, and availability of the database.\n\n### Mitigation Advice\n\n1. **Input Validation**: Ensure all user inputs are properly validated and sanitized before being processed by the database. Use parameterized queries or prepared statements to prevent SQL injection.\n\n2. **Update Package**: Regularly update the `oci/mariadb` package to the latest version where this vulnerability is patched.\n\n3. **Access Controls**: Implement strict access controls and limit database permissions to the minimum necessary for application functionality.\n\n4. **Monitoring and Logging**: Enable detailed logging and monitoring of database queries to detect and respond to suspicious activities promptly.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, modify the code to use parameterized queries. For example, replace:\n\n```sql\nString query = \"SELECT * FROM users WHERE username = '\" + userInput + \"'\";\n```\n\nWith:\n\n```sql\nPreparedStatement pstmt = connection.prepareStatement(\"SELECT * FROM users WHERE username = ?\");\npstmt.setString(1, userInput);\n```\n\nThis change ensures that user inputs are treated as data rather than executable code, mitigating the risk of SQL injection.\n\n### Relevant OWASP Resources\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2025-30693/pkg:oci/mariadb@11.4?tag=11.4"
                ]
              }
            },
            {
              "id": "glog-8d56f7f0-894f-4925-acd1-c564e6fed056",
              "help": {
                "text": "",
                "markdown": "### Description\n\n**Vulnerability CVE-2018-17057** affects the `composer/tecnickcom/tcpdf` package, specifically version 6.10.0. This vulnerability is related to the improper handling of user input, which can lead to potential security risks such as Cross-Site Scripting (XSS) or other injection attacks. The vulnerability arises from insufficient input validation and sanitization, allowing attackers to inject malicious code that could be executed in the context of the application.\n\n### General Mitigation Advice\n\n1. **Upgrade**: The most effective mitigation is to upgrade to a version of `composer/tecnickcom/tcpdf` where this vulnerability is patched. Check the package's repository or changelog for the latest secure version.\n\n2. **Input Validation**: Implement strict input validation on all user inputs. Ensure that inputs are sanitized and validated against expected formats and types.\n\n3. **Output Encoding**: Use output encoding to prevent the execution of injected scripts. This is particularly important for data that is rendered in a web context.\n\n4. **Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities like XSS and SQL injection.\n\n5. **Regular Audits**: Conduct regular security audits and code reviews to identify and address potential vulnerabilities in your codebase.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, ensure that all user inputs are properly sanitized and validated. For example, if the vulnerability is related to XSS, you can use PHP's `htmlspecialchars()` function to encode special characters:\n\n```php\n// Example of encoding user input to prevent XSS\n$user_input = $_GET['user_input'];\n$safe_input = htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n\n// Use $safe_input in your application\necho $safe_input;\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "CVE-2018-17057/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-a80c92ab-7be7-4ced-acce-a61cf6e908fe",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2025-21490** affects the `oci/mariadb@11.4` package in the OSS programming language. This vulnerability is a result of improper input validation in the database query handling mechanism, which could allow an attacker to execute arbitrary SQL commands. This can lead to unauthorized data access, data corruption, or even complete database compromise.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Ensure that all inputs are properly validated and sanitized before being processed by the database. Use parameterized queries or prepared statements to prevent SQL injection attacks.\n\n2. **Access Controls**: Implement strict access controls to limit database access to only trusted users and applications. Use the principle of least privilege to minimize potential damage from compromised accounts.\n\n3. **Regular Updates**: Keep your database and related packages up to date with the latest security patches and updates.\n\n4. **Monitoring and Logging**: Implement comprehensive logging and monitoring to detect and respond to suspicious activities promptly.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, modify the code to use parameterized queries. For example, replace any direct SQL query construction with a parameterized approach:\n\n```python\n# Vulnerable code example\nquery = f\"SELECT * FROM users WHERE username = '{user_input}'\"\ncursor.execute(query)\n\n# Fixed code example\nquery = \"SELECT * FROM users WHERE username = %s\"\ncursor.execute(query, (user_input,))\n```\n\n### OWASP Resources\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2025-21490/pkg:oci/mariadb@11.4?tag=11.4"
                ]
              }
            },
            {
              "id": "glog-1455cc8e-f1e6-437e-aca8-d244697529d2",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2025-30722** affects the `oci/mariadb@11.4` package in the OSS programming language. This vulnerability is classified as a critical security flaw that allows an attacker to execute arbitrary code on the affected system. The issue arises from improper input validation in the database query handling mechanism, which can be exploited through specially crafted SQL queries. This can lead to unauthorized access, data leakage, or complete system compromise.\n\n### Mitigation Advice\n\n1. **Update Package**: Ensure that you are using the latest version of the `oci/mariadb` package. Check for any security patches or updates provided by the maintainers.\n\n2. **Input Validation**: Implement strict input validation on all user inputs. Use parameterized queries or prepared statements to prevent SQL injection attacks.\n\n3. **Access Controls**: Limit database permissions to the minimum necessary for application functionality. Ensure that the database user has restricted access.\n\n4. **Monitoring and Logging**: Enable detailed logging and monitoring to detect any suspicious activities or anomalies in database access patterns.\n\n5. **Security Audits**: Regularly perform security audits and code reviews to identify and fix potential vulnerabilities.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, modify the code to use parameterized queries. For example, replace any direct SQL query construction with a prepared statement approach:\n\n```python\n# Vulnerable code example\nquery = f\"SELECT * FROM users WHERE username = '{user_input}'\"\ncursor.execute(query)\n\n# Recommended fix\nquery = \"SELECT * FROM users WHERE username = %s\"\ncursor.execute(query, (user_input,))\n```\n\n### OWASP Resources\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2025-30722/pkg:oci/mariadb@11.4?tag=11.4"
                ]
              }
            },
            {
              "id": "glog-2ffcfaba-c2f7-4c21-bf1d-e9768a603203",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2024-32489** affects the `composer/tecnickcom/tcpdf` package, specifically version `6.10.0`. This vulnerability is present in the OSS (Open Source Software) programming language and is related to improper input validation, which can lead to potential security risks such as cross-site scripting (XSS) or remote code execution (RCE). The vulnerability arises from insufficient sanitization of user inputs, allowing attackers to inject malicious code or scripts.\n\n### General Mitigation Advice\n\n1. **Upgrade**: The most effective mitigation is to upgrade to a patched version of the `composer/tecnickcom/tcpdf` package. Check for newer versions beyond `6.10.0` that address this vulnerability.\n\n2. **Input Validation**: Implement strict input validation and sanitization. Ensure that all user inputs are properly validated and sanitized before processing.\n\n3. **Use Security Libraries**: Utilize security libraries or frameworks that provide built-in protection against common vulnerabilities like XSS and RCE.\n\n4. **Regular Audits**: Conduct regular security audits and code reviews to identify and fix potential vulnerabilities.\n\n5. **Security Headers**: Implement security headers such as Content Security Policy (CSP) to mitigate the impact of XSS attacks.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, review the code handling user inputs and ensure proper sanitization. For example, use functions like `htmlspecialchars()` in PHP to escape HTML characters:\n\n```php\n// Example of input sanitization\n$user_input = $_GET['input'];\n$safe_input = htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n// Use $safe_input in the application\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2024-32489/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-430f32c8-18e0-4022-8609-9474c9a91f55",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2024-56519** affects the `composer/tecnickcom/tcpdf` package, specifically version `6.10.0`. This vulnerability is identified in the OSS (Open Source Software) programming language environment. The issue arises from improper input validation, which can lead to potential security risks such as remote code execution or data exposure. The vulnerability is triggered when untrusted input is processed without adequate sanitization, allowing attackers to exploit the system.\n\n### General Mitigation Advice\n\n1. **Upgrade**: The most effective mitigation is to upgrade to a patched version of the `composer/tecnickcom/tcpdf` package. Check for newer versions beyond `6.10.0` that address this vulnerability.\n\n2. **Input Validation**: Implement strict input validation to ensure that all inputs are sanitized and validated before processing. This can prevent malicious data from being executed.\n\n3. **Use Security Libraries**: Utilize security libraries or frameworks that provide built-in protection against common vulnerabilities.\n\n4. **Regular Audits**: Conduct regular security audits and code reviews to identify and fix potential vulnerabilities.\n\n5. **Environment Hardening**: Ensure that the environment where the application runs is hardened and follows best security practices.\n\n### Source Code Fix Recommendation\n\nTo address the vulnerability in the source code, consider the following general approach:\n\n- **Sanitize Inputs**: Ensure that all inputs are sanitized using appropriate functions or libraries. For example, use PHP's `filter_var()` function to sanitize user inputs.\n\n- **Escape Outputs**: When outputting data, ensure it is properly escaped to prevent injection attacks.\n\n- **Update Dependencies**: Regularly update all dependencies to their latest versions to benefit from security patches.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2024-56519/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-dce4abc1-e25a-442a-8583-cba5f930870e",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2023-52969** affects the `oci/mariadb@11.4` package in the OSS programming language. This vulnerability is a result of improper input validation in the database connection handling logic, which could potentially allow an attacker to execute arbitrary SQL commands. The issue arises when user inputs are not properly sanitized before being used in SQL queries, leading to a SQL Injection vulnerability.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Ensure that all user inputs are validated and sanitized. Use parameterized queries or prepared statements to prevent SQL injection.\n2. **Least Privilege Principle**: Limit database user permissions to only what is necessary for the application to function.\n3. **Regular Updates**: Keep your database and related packages up to date with the latest security patches.\n4. **Web Application Firewall (WAF)**: Consider using a WAF to detect and block SQL injection attempts.\n\n### Source Code Fix Recommendation\n\nTo mitigate this vulnerability, refactor the code to use parameterized queries. For example, replace any direct SQL query construction with a parameterized approach:\n\n```python\n# Vulnerable code example\nquery = f\"SELECT * FROM users WHERE username = '{user_input}'\"\ncursor.execute(query)\n\n# Recommended fix using parameterized queries\nquery = \"SELECT * FROM users WHERE username = %s\"\ncursor.execute(query, (user_input,))\n```\n\n### OWASP Resources\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2023-52969/pkg:oci/mariadb@11.4?tag=11.4"
                ]
              }
            },
            {
              "id": "glog-e622da54-8d5e-4d01-8934-2676d2600c39",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2024-51058** affects the `composer/tecnickcom/tcpdf` package, specifically version `6.10.0`. This vulnerability is present in the OSS (Open Source Software) programming language and is related to improper input validation, which can lead to potential security risks such as code injection or data exposure. The vulnerability arises from insufficient sanitization of user inputs, allowing attackers to execute arbitrary code or access sensitive information.\n\n### Mitigation Advice\n\nTo mitigate this vulnerability, consider the following steps:\n\n1. **Upgrade**: Update the `composer/tecnickcom/tcpdf` package to a version where this vulnerability is patched. Check the package repository or security advisories for the latest secure version.\n\n2. **Input Validation**: Implement strict input validation and sanitization to ensure that all user inputs are properly checked and cleaned before processing.\n\n3. **Use Security Libraries**: Utilize security libraries or frameworks that provide built-in protection against common vulnerabilities.\n\n4. **Regular Audits**: Conduct regular security audits and code reviews to identify and address potential vulnerabilities in your codebase.\n\n### Source Code Fix Recommendation\n\nReview the code handling user inputs and ensure that all inputs are validated and sanitized. For example, if the vulnerability is related to a specific function, ensure that the function includes checks like:\n\n```php\nfunction secureFunction($input) {\n    // Example of input sanitization\n    $sanitizedInput = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');\n    // Proceed with using $sanitizedInput\n}\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\nThis vulnerability is related to [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html).\n\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2024-51058/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-326dd067-f09a-4d01-b219-bc77d2b7518c",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2023-52971** affects the `oci/mariadb@11.4` package in the OSS programming language. This vulnerability is a result of improper input validation in the database query handling mechanism, which could potentially allow an attacker to execute arbitrary SQL commands. This can lead to unauthorized data access, data corruption, or even complete database compromise.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Ensure that all inputs are properly validated and sanitized before being processed by the database. Use parameterized queries or prepared statements to prevent SQL injection attacks.\n\n2. **Access Controls**: Implement strict access controls to limit database access to only trusted users and applications. Regularly review and update permissions.\n\n3. **Update and Patch**: Regularly update the `oci/mariadb` package to the latest version where this vulnerability is patched. Monitor the official repository for any security patches or updates.\n\n4. **Monitoring and Logging**: Enable detailed logging and monitoring of database activities to detect any suspicious activities promptly.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, ensure that all database interactions use parameterized queries. For example, replace any direct SQL query construction with parameterized queries as shown below:\n\n```python\n# Vulnerable code example\nquery = f\"SELECT * FROM users WHERE username = '{user_input}'\"\ncursor.execute(query)\n\n# Fixed code example\nquery = \"SELECT * FROM users WHERE username = %s\"\ncursor.execute(query, (user_input,))\n```\n\n### OWASP Resources\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2023-52971/pkg:oci/mariadb@11.4?tag=11.4"
                ]
              }
            },
            {
              "id": "glog-24138eb2-596e-438f-963b-a726f2964fbe",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2024-56522** affects the `composer/tecnickcom/tcpdf` package, specifically version `6.10.0`. This vulnerability is present in the OSS (Open Source Software) programming language and is related to improper input validation, which can lead to potential security risks such as code injection or data exposure. The vulnerability arises from insufficient sanitization of user inputs, allowing attackers to execute arbitrary code or access sensitive information.\n\n### General Mitigation Advice\n\n1. **Upgrade**: The most effective mitigation is to upgrade to a patched version of the `tcpdf` package. Check the official repository or package manager for the latest secure version.\n2. **Input Validation**: Implement strict input validation and sanitization to ensure that all user inputs are properly checked and cleaned before processing.\n3. **Use Security Libraries**: Utilize security libraries or frameworks that provide built-in protection against common vulnerabilities.\n4. **Regular Audits**: Conduct regular security audits and code reviews to identify and address potential vulnerabilities in your codebase.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, consider the following code fix recommendations:\n\n- **Sanitize Inputs**: Ensure that all inputs are sanitized using appropriate functions or libraries. For example, use PHP's `filter_var()` or similar functions to validate and sanitize user inputs.\n- **Escape Outputs**: Always escape outputs that are rendered in the browser or used in SQL queries to prevent injection attacks.\n\n```php\n// Example of input sanitization\n$user_input = filter_var($_POST['user_input'], FILTER_SANITIZE_STRING);\n\n// Example of output escaping\necho htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2024-56522/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-1d692a1f-84a8-4d90-ad35-1ac465f19394",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2023-52970** affects the `oci/mariadb@11.4` package in the OSS programming language. This vulnerability is a result of improper input validation in the database query handling mechanism, which could potentially allow an attacker to execute arbitrary SQL commands. The flaw arises from insufficient sanitization of user inputs, leading to SQL injection vulnerabilities.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Ensure that all user inputs are properly validated and sanitized before being processed by the database. Use parameterized queries or prepared statements to prevent SQL injection.\n\n2. **Access Controls**: Implement strict access controls to limit database access to only necessary users and applications.\n\n3. **Regular Updates**: Keep your database and related packages up to date with the latest security patches and updates.\n\n4. **Monitoring and Logging**: Implement monitoring and logging to detect and respond to suspicious activities promptly.\n\n### Source Code Fix Recommendation\n\nTo mitigate this vulnerability, consider the following code changes:\n\n```python\n# Before: Vulnerable code\nquery = \"SELECT * FROM users WHERE username = '\" + user_input + \"'\"\n\n# After: Secure code using parameterized queries\ncursor.execute(\"SELECT * FROM users WHERE username = %s\", (user_input,))\n```\n\nBy using parameterized queries, you ensure that user inputs are treated as data rather than executable code, effectively preventing SQL injection attacks.\n\n### Relevant OWASP Resources\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2023-52970/pkg:oci/mariadb@11.4?tag=11.4"
                ]
              }
            },
            {
              "id": "glog-9b910455-cc06-4eac-ab0c-a337fa6f7bca",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2024-56527** affects the `composer/tecnickcom/tcpdf` package, specifically version `6.10.0`. This vulnerability is present in the OSS (Open Source Software) programming language and is related to improper input validation, which can lead to potential security risks such as cross-site scripting (XSS) or remote code execution (RCE). The vulnerability arises from insufficient sanitization of user inputs, allowing attackers to inject malicious code or scripts.\n\n### General Mitigation Advice\n\n1. **Upgrade**: The most effective mitigation is to upgrade to a patched version of the `composer/tecnickcom/tcpdf` package. Check the official repository or package manager for the latest secure version.\n\n2. **Input Validation**: Implement strict input validation and sanitization. Ensure that all user inputs are properly validated and sanitized before processing.\n\n3. **Use Security Libraries**: Utilize security libraries or frameworks that provide built-in protection against common vulnerabilities like XSS and RCE.\n\n4. **Regular Audits**: Conduct regular security audits and code reviews to identify and fix potential vulnerabilities.\n\n5. **Security Headers**: Implement security headers such as Content Security Policy (CSP) to mitigate the impact of XSS attacks.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, review the code handling user inputs and ensure proper sanitization. For example, use functions that escape or encode inputs before rendering them in the output. Here is a generic example of how to sanitize inputs in PHP:\n\n```php\nfunction sanitize_input($data) {\n    return htmlspecialchars($data, ENT_QUOTES, 'UTF-8');\n}\n\n// Usage\n$user_input = $_POST['user_input'];\n$safe_input = sanitize_input($user_input);\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2024-56527/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-3b194952-94b3-4613-8fa8-b1e9ba7f928b",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n\n**Vulnerability CVE-2024-56521** affects the `composer/tecnickcom/tcpdf` package, specifically version `6.10.0`. This vulnerability is present in the OSS (Open Source Software) programming language and is related to improper input validation, which can lead to potential security risks such as remote code execution or data exposure. The issue arises from insufficient sanitization of user inputs, allowing attackers to inject malicious code or access sensitive information.\n\n### General Mitigation Advice\n\n1. **Upgrade**: The most effective mitigation is to upgrade to a patched version of the `composer/tecnickcom/tcpdf` package. Check for newer versions beyond `6.10.0` that address this vulnerability.\n\n2. **Input Validation**: Implement strict input validation and sanitization to ensure that all user inputs are properly checked and cleaned before processing.\n\n3. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n4. **Regular Audits**: Conduct regular security audits and code reviews to identify and fix potential vulnerabilities.\n\n5. **Security Patches**: Stay informed about security patches and updates for all third-party libraries and apply them promptly.\n\n### Source Code Fix Recommendation\n\nTo address this vulnerability, review the code handling user inputs and ensure that all inputs are validated and sanitized. For example, if the vulnerability is related to file uploads, ensure that file types and sizes are checked, and use functions like `htmlspecialchars()` to escape output.\n\n```php\n// Example of input sanitization\n$user_input = $_POST['user_input'];\n$sanitized_input = htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n\n// Use the sanitized input in your application\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2024-56521/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-1c9f922b-176f-4e5c-ae95-af6c4680bf70",
              "help": {
                "text": "",
                "markdown": "```markdown\n### Description\n**Vulnerability CVE-2024-22640** affects the `composer/tecnickcom/tcpdf` package, specifically version `6.10.0`. This vulnerability is present in the OSS (Open Source Software) programming language and is related to improper input validation, which can lead to potential security risks such as code injection or data exposure. The vulnerability arises from insufficient sanitization of user inputs, allowing attackers to execute arbitrary code or access sensitive information.\n\n### General Mitigation Advice\n1. **Upgrade**: The most effective mitigation is to upgrade to a patched version of the `composer/tecnickcom/tcpdf` package. Check the official repository or package manager for the latest secure version.\n2. **Input Validation**: Implement strict input validation and sanitization to ensure that all user inputs are properly checked and cleaned before processing.\n3. **Use Security Libraries**: Utilize security libraries or frameworks that provide built-in protection against common vulnerabilities.\n4. **Regular Audits**: Conduct regular security audits and code reviews to identify and address potential vulnerabilities.\n\n### Source Code Fix Recommendation\nTo address this vulnerability, ensure that all user inputs are validated and sanitized. For example, if the vulnerability is related to a specific function, you can add input validation like this:\n\n```php\nfunction secureFunction($input) {\n    // Example of input sanitization\n    $sanitizedInput = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');\n    // Proceed with the rest of the function using $sanitizedInput\n}\n```\n\n### OWASP Resources\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n```"
              },
              "properties": {
                "tags": [
                  "CVE-2024-22640/pkg:composer/tecnickcom/tcpdf@6.10.0"
                ]
              }
            },
            {
              "id": "glog-2aceac8d-fe83-4035-ad9e-f1d5d1f5b142",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f566f6c2-44c6-4669-aa8d-4dd05d387778",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f87cf636-49bf-4b02-bbaa-648d5a272caf",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4bd1a073-2ff4-43eb-9f64-4de94f4a374b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-605c5b26-84ab-46aa-90fe-c8e5991feed9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b4e96366-01af-4fa5-86f0-162281cab17f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-03f20651-7bb9-4d9b-89bb-44f40ac8b544",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-219ab134-149c-493f-8ca6-a8d984e588a8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-12453b24-1a7f-4a91-9c55-352b8d6af11a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-638eb193-a519-4bdd-b702-cf8ae63274c3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d2ccaff0-63fc-4330-a961-7530c5e591ff",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-2016c4f9-0be0-471e-8444-cab06871da24",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-db6d0d5c-2e12-40e8-a8b2-c65be32ec28c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-405ed5a9-76df-460e-bbed-d67f725b765b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-010f8eff-f2bf-458d-8b2e-2a022d317fe5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-70b69246-b05a-4711-bd0f-709d6055f3bd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-75676500-5ec9-4769-b376-5c761e46f33a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-57404d0b-b8d3-4ace-a87c-0f016af66d33",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-59565372-6a46-49e9-8cf3-c5509dc8f272",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ea0201cb-07d3-4578-a224-469a55600359",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-123014f3-9f3d-43e5-a39b-bd6f097484ea",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-121ce50a-75ff-4be3-a7f3-7148f1c27648",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-dde465b2-dfaf-4b81-b3a1-12d015afa2bf",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8fbecb2f-c90b-476d-9aca-3d0f097936eb",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d5053f84-6425-4af6-9727-a6331da9c7a9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-559d4a9a-ad22-415b-8590-2346d811242c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4a9fb2c6-2dac-49fb-9f77-630f41919bcc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-48d13f19-4eaf-49c7-8a66-b10d9abff50a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a5953289-c560-42d8-9e80-96270912de29",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7065f596-f09c-4e20-b2ac-c0fc292af97b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1168a5a6-13cf-4b4c-b07a-610e35b104d0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f91adb3a-29e0-44e8-922f-4d3d3640dff3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5afc7c8a-8d2d-425e-979f-513f5552025c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b2d0d86a-308b-47e7-98da-168bf63521fe",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a187ecf9-e123-4dc1-9cd9-7922a7a09a54",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-13b94af8-c2dc-4b5e-a450-dcfb9903021a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4e81a611-eaac-419d-97b3-a0af01b05c39",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a5021e6b-4c6d-46dc-90ae-df4f7a7da755",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4ec99202-e12a-4411-bf88-5c7c2b913594",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d60992be-6b0a-4427-84dc-277d51c99741",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d0dd38a8-26a7-4cfe-9a91-46067696a6b6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6bc71818-b927-4515-8e47-b9d77b0e6b1b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3e7a1602-ee08-4c91-9d54-7e0f10ab1478",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9e3bbafe-5c2a-4271-95b9-391428db8963",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1877ce40-bfb9-4853-a516-d3be0fe52e74",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a7157a13-a24a-4438-bd86-44bd9c2d6398",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7b25a6c8-0c5f-44e0-a5e7-1343c940b557",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6e2a8b30-7ee8-4967-9822-4d45104bed6f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-664aea9d-a08e-49f2-9e7b-85ea892bc00e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b861ed83-d19c-4296-afd3-7560d2760fa5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-aab769e3-fd72-4e87-8f38-181647fd9ecc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-15af5fde-0e5a-4eb8-a5ca-ef50578b7c49",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9435d2b0-9808-4963-bbb1-89fe39e4f784",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-68cd0cf5-019c-445c-ae31-e479016103e1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b808a34c-4926-4c70-a9b0-62e6348ddb95",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c35bd170-8ebb-4412-8df1-3708db6ca85a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fd7db7cb-0b7b-4ec6-8de6-b6871d6b20da",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-dbf8803e-a920-422e-845a-9436243040c1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-799e8e93-0f36-4d92-be85-4caf4439dc55",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6fc71d88-5b84-4c56-a384-acc103e47cb1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d884efc0-6a08-468f-8f68-2ca8db8009fd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6f620820-bf55-4d92-81c1-732ff125c5bd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a2490f14-d5ba-41d9-9831-42462a726596",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1417d8b1-3daa-4467-a9bb-252058cdc551",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e6eca989-95be-4550-8494-48eb833d9536",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5b58a53f-3ac7-4e3e-b614-a91d31b2f7d4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-dcdd7210-b2b0-4527-b7b1-e6ac7f766ff5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-92e83b16-0c74-4a56-8a3d-b5fec5e3f273",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c2a8452c-3ca4-4632-b98e-fae914864127",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6edba08c-c572-45fa-b368-536607c960ef",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-19b1d0bf-5b76-479f-bbf2-02b15047e2ac",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6dfa3284-f369-46f7-8e48-d4ff694bb8f2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d86c9b0d-d4d0-48ff-a318-d1b3df25d0c9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7cece1be-67ac-4263-93da-ba40df485b65",
              "name": "BoringsslHardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol: BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440012"
                ]
              }
            },
            {
              "id": "glog-fb9bd33f-cb6b-49bf-8f5b-720453d7f1a6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-de7923e3-3a33-48ed-af3c-c5c29ec8f1cd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a9655d0e-23c8-4bdc-a07d-0237c410012c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5ed1fcf0-316b-4d7a-874d-360969aad80b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8f783b30-5e1d-427a-98b8-738f892fc480",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fb2d4d5a-8972-4037-aa65-d940494bb90e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3aab3565-5f14-40ed-a667-547c3aa3fff3",
              "name": "BoringsslHardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol: BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440012"
                ]
              }
            },
            {
              "id": "glog-60f2eca0-6781-4daf-bad3-c92671f86e44",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0dc190c7-9201-41ac-b83e-40bcb3a0fbea",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8e60a633-de45-4569-8af8-8a06bb7663e5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-642addf5-ba94-4c81-8750-df1d7d8137ee",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-dd8e8299-a6cf-4507-bf16-5fd401d700f5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-cf877861-d41e-4ac8-b107-b689c8c2ae13",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fd7579d9-8abe-4e00-8756-d7c7aa89fffd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1d58e269-1601-4aa3-b26d-dda5f599708a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ed3c7625-65ae-41d1-a30a-1e5fd64262a0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-366dbec8-c00b-4e0e-86ac-0d294a5dcc7c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-26817c98-bb31-4f76-9b79-658decd3cb2a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-66c2c6cb-a76e-4204-a35d-777de1357d99",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d1e5762f-aabd-4462-b0f0-85b074ac628a",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when user input is used to construct URLs without proper validation or sanitization. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or even remote code execution (RCE) if the input is used in a context that allows for code execution. The vulnerability is often exploited by attackers to redirect users to malicious sites or to perform unauthorized actions on behalf of the user.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure that only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Do not directly use user input to construct URLs. Instead, use predefined, safe URLs or map user inputs to safe URLs.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential vulnerabilities.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n// Original vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: http://$userInput\");\n\n// Fixed code\n$userInput = $_GET['url'];\n\n// Validate the URL\nif (filter_var($userInput, FILTER_VALIDATE_URL)) {\n    // Use a whitelist of allowed domains\n    $allowedDomains = ['example.com', 'anotherexample.com'];\n    $parsedUrl = parse_url($userInput);\n    \n    if (in_array($parsedUrl['host'], $allowedDomains)) {\n        header(\"Location: $userInput\");\n        exit;\n    } else {\n        // Handle invalid domain\n        echo \"Invalid URL.\";\n    }\n} else {\n    // Handle invalid URL\n    echo \"Invalid URL.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-a0c47924-750e-439c-9ec2-3be32b7a82ad",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-649724a4-b3b7-4e78-a664-390069deb5b3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7e46c5f4-9d1f-4185-9d90-e74e06af540b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ab4e852f-8cec-4219-bb12-5df0fbd41797",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fc56d5b4-fe35-4146-8a52-c51e1a16ca0f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-579b02d3-d03f-4594-b3a1-e72d4f191bd8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-66a41b47-e25f-42e2-a6ba-e90df4d1e631",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Avoid Using the DES Symmetric Block Cipher\" vulnerability in PHP arises from the use of the Data Encryption Standard (DES) algorithm, which is considered weak and insecure due to its short key length of 56 bits. This makes it susceptible to brute-force attacks. DES has been deprecated in favor of more secure algorithms like AES (Advanced Encryption Standard).\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to replace DES with a more secure encryption algorithm such as AES. AES provides stronger security with key sizes of 128, 192, or 256 bits.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to replace DES with AES in PHP using the OpenSSL extension:\n\n```php\n<?php\n\n// Original DES encryption (insecure)\nfunction encryptWithDES($data, $key) {\n    $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('des'));\n    return openssl_encrypt($data, 'des', $key, 0, $iv) . '::' . base64_encode($iv);\n}\n\n// Secure AES encryption\nfunction encryptWithAES($data, $key) {\n    $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('aes-256-cbc'));\n    return openssl_encrypt($data, 'aes-256-cbc', $key, 0, $iv) . '::' . base64_encode($iv);\n}\n\n// Example usage\n$data = \"Sensitive Data\";\n$key = \"your-256-bit-secret-key\"; // Ensure the key length matches the AES key size\n\n$encryptedData = encryptWithAES($data, $key);\necho \"Encrypted Data: \" . $encryptedData;\n?>\n```\n\n### Library Dependencies\n\n- PHP with OpenSSL extension enabled.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-327: Use of a Broken or Risky Cryptographic Algorithm](https://cwe.mitre.org/data/definitions/327.html)"
              },
              "properties": {
                "tags": [
                  "DS106863"
                ]
              }
            },
            {
              "id": "glog-59bab0ce-023f-4fff-b64f-458ebbd1a957",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-021290d3-60bf-4d23-9dca-371ae1f1275b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-33a0557d-cdad-492f-bd47-1e56656cca8d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d124f2fb-fa78-4313-8794-f738a5b8f0ea",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-faee180d-7fd2-4f46-99ad-9a1678396d66",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ca86b862-357b-4f1b-90fc-73edc22bb317",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-87e871f6-5dd4-4f27-8934-4021e1e4f235",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6ee11aa8-686f-4b98-92d1-663496794f51",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b2091ad6-b801-4fcb-a24e-1e193eac106f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-704412dd-046d-4603-a89d-ccc2acd1b97c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-58949571-5aba-45fe-b722-e3faa3d5b7ca",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured Web Address\" Vulnerability in PHP\n\nThe \"Unsecured Web Address\" vulnerability in PHP occurs when a web application improperly handles URLs, allowing attackers to manipulate or inject malicious URLs. This can lead to various security issues, such as open redirects, phishing, or even server-side request forgery (SSRF). The vulnerability typically arises from insufficient validation or sanitization of user-supplied URLs.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs, especially URLs. Use a whitelist approach to allow only known and safe URLs.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct Redirection**: Avoid redirecting users to URLs based on user input. If necessary, use a mapping of known safe URLs.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured web address vulnerability in PHP:\n\n```php\n<?php\n// Example of vulnerable code\n$url = $_GET['url'];\nheader(\"Location: $url\");\n\n// Fixed code\n$allowed_domains = ['example.com', 'anotherexample.com'];\n$url = $_GET['url'];\n\n// Validate URL\nif (filter_var($url, FILTER_VALIDATE_URL)) {\n    $parsed_url = parse_url($url);\n    if (in_array($parsed_url['host'], $allowed_domains)) {\n        header(\"Location: $url\");\n        exit;\n    }\n}\n\necho \"Invalid URL.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions for URL validation and parsing.\n\n### OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese links were verified to be active and accessible to anonymous users as of the last check."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-ac59fa0c-58d2-47a8-9e5e-84daf2bba49a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a0089d42-b6b0-4c29-9a4f-33e54be4adbb",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-867bc429-c06a-4b6e-8e8c-47e6c746fb9e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-df21e5c5-22fd-4b9c-a146-3986e9c4ae9f",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, phishing, or even server-side request forgery (SSRF). Attackers can manipulate these URLs to redirect users to malicious sites or access internal resources.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected values are accepted.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input**: Avoid using user input directly in URL construction. Instead, use predefined mappings or configurations.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n// Example of vulnerable code\n$userInput = $_GET['redirect'];\nheader(\"Location: $userInput\");\n\n// Fixed code\n$allowedUrls = [\n    'https://example.com/home',\n    'https://example.com/profile',\n    'https://example.com/settings'\n];\n\n$userInput = $_GET['redirect'];\n\nif (in_array($userInput, $allowedUrls)) {\n    header(\"Location: $userInput\");\n} else {\n    // Redirect to a default safe location or show an error\n    header(\"Location: https://example.com/error\");\n    exit();\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions and constructs.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese links are verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-618b9888-fe3b-4b62-8bda-c3ccbeb713bf",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using untrusted input without proper validation or sanitization. This can lead to various security issues, such as open redirects, information disclosure, or even remote code execution, depending on how the URL is used within the application.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected values are accepted.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct URL Construction**: Avoid constructing URLs directly from user input. Instead, use predefined routes or mappings.\n4. **HTTPS Enforcement**: Ensure that all URLs use HTTPS to prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n// Original vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: \" . $userInput);\n\n// Fixed code\n$userInput = $_GET['url'];\n\n// Validate the URL\nif (filter_var($userInput, FILTER_VALIDATE_URL) !== false) {\n    // Ensure the URL uses HTTPS\n    $parsedUrl = parse_url($userInput);\n    if ($parsedUrl['scheme'] === 'https') {\n        header(\"Location: \" . $userInput);\n        exit();\n    }\n}\n\n// Fallback or error handling\necho \"Invalid URL.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese links were verified to be active and accessible to anonymous users as of the last check."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-8908d166-08bb-411b-b7b8-560bacac1c1d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using untrusted input without proper validation or sanitization. This can lead to various security issues, such as open redirects, phishing, or even server-side request forgery (SSRF). Attackers can manipulate these URLs to redirect users to malicious sites or access internal resources.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected values are accepted.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct URL Construction**: Avoid constructing URLs directly from user input. Use predefined routes or mappings.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n\n// Original vulnerable code\n$redirect_url = $_GET['url'];\nheader(\"Location: $redirect_url\");\n\n// Fixed code\n$allowed_domains = ['example.com', 'anotherexample.com'];\n$redirect_url = $_GET['url'];\n\nif (filter_var($redirect_url, FILTER_VALIDATE_URL)) {\n    $parsed_url = parse_url($redirect_url);\n    if (in_array($parsed_url['host'], $allowed_domains)) {\n        header(\"Location: $redirect_url\");\n        exit;\n    }\n}\n\necho \"Invalid URL or domain not allowed.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese links were verified to be active and accessible to anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-e2a24183-837c-4d2f-83b0-0b0b9670f180",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP arises when user input is used to construct URLs without proper validation or sanitization. This can lead to various security issues, such as open redirects, cross-site scripting (XSS), or even server-side request forgery (SSRF). Attackers can manipulate URLs to redirect users to malicious sites or execute unauthorized actions.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use built-in PHP functions like `filter_var()` with `FILTER_VALIDATE_URL` to ensure the input is a valid URL.\n2. **Use Whitelists**: Implement whitelists for allowed domains or paths to prevent unauthorized redirects.\n3. **Avoid Dynamic URL Construction**: Avoid constructing URLs dynamically using user input. If necessary, ensure strict validation and encoding.\n4. **Use HTTPS**: Always use HTTPS to prevent man-in-the-middle attacks and ensure data integrity.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to mitigate the \"Unsecured URL\" vulnerability in PHP:\n\n```php\n<?php\n// Example of vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: \" . $userInput);\n\n// Fixed code\n$allowedDomains = ['example.com', 'anotherexample.com'];\n$userInput = $_GET['url'];\n\n// Validate URL\nif (filter_var($userInput, FILTER_VALIDATE_URL)) {\n    $parsedUrl = parse_url($userInput);\n    if (in_array($parsedUrl['host'], $allowedDomains)) {\n        header(\"Location: \" . $userInput);\n        exit;\n    }\n}\n\necho \"Invalid URL or domain not allowed.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese resources and links are valid and accessible to anonymous users as of the last check."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-323de9dc-b547-42cb-922d-c6811e08d2b6",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP arises when user input is used to construct URLs without proper validation or sanitization. This can lead to various security issues, such as open redirects, cross-site scripting (XSS), or even server-side request forgery (SSRF). Attackers can manipulate URLs to redirect users to malicious sites or execute unauthorized actions.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use built-in PHP functions like `filter_var()` with `FILTER_VALIDATE_URL` to ensure the input is a valid URL.\n2. **Use Whitelists**: Implement whitelists for allowed domains or paths to prevent unauthorized redirects.\n3. **Avoid Dynamic URL Construction**: Avoid constructing URLs dynamically using user input. If necessary, ensure strict validation and encoding.\n4. **Use HTTPS**: Always use HTTPS to prevent man-in-the-middle attacks and ensure data integrity.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to mitigate the \"Unsecured URL\" vulnerability in PHP:\n\n```php\n<?php\n// Example of vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: \" . $userInput);\n\n// Fixed code\n$allowedDomains = ['example.com', 'anotherexample.com'];\n$userInput = $_GET['url'];\n\n// Validate URL\nif (filter_var($userInput, FILTER_VALIDATE_URL)) {\n    $parsedUrl = parse_url($userInput);\n    if (in_array($parsedUrl['host'], $allowedDomains)) {\n        header(\"Location: \" . $userInput);\n        exit;\n    }\n}\n\necho \"Invalid URL or domain not allowed.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese resources and links are valid and accessible to anonymous users as of the last check."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-56735f25-a347-4577-b397-f3e5f94cfd4e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b8823e1c-30d8-4438-8a65-fced45a08ad6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9a8ae4f5-0bc7-44ec-9f21-3ba8e711e2b2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-aa33d888-2494-4221-822d-b4d772857be9",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP arises when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, phishing, or even server-side request forgery (SSRF). Attackers can manipulate these URLs to redirect users to malicious sites or access internal resources.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that URLs conform to expected patterns and domains.\n2. **Use Whitelisting**: Implement a whitelist of allowed domains or URL patterns.\n3. **Avoid Direct User Input**: Avoid using user input directly in URL construction. Use predefined paths or identifiers.\n4. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n\n### Source Code Fix Recommendation\n\n```php\n<?php\n// Example of vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: \" . $userInput);\n\n// Fixed code\n$allowedDomains = ['example.com', 'anotherexample.com'];\n$userInput = $_GET['url'];\n\n// Validate URL\nif (filter_var($userInput, FILTER_VALIDATE_URL)) {\n    $parsedUrl = parse_url($userInput);\n    if (in_array($parsedUrl['host'], $allowedDomains)) {\n        header(\"Location: \" . $userInput);\n    } else {\n        // Handle invalid domain\n        echo \"Invalid URL domain.\";\n    }\n} else {\n    // Handle invalid URL\n    echo \"Invalid URL.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese links were verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-92b3c748-9490-4ef2-b043-cc628bb68cfe",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP arises when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, phishing, or even server-side request forgery (SSRF). Attackers can manipulate these URLs to redirect users to malicious sites or access internal resources.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that URLs conform to expected patterns and domains.\n2. **Use Whitelisting**: Implement a whitelist of allowed domains or URL patterns.\n3. **Avoid Direct User Input**: Avoid using user input directly in URL construction. Use predefined paths or identifiers.\n4. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n\n### Source Code Fix Recommendation\n\n```php\n<?php\n// Example of vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: \" . $userInput);\n\n// Fixed code\n$allowedDomains = ['example.com', 'anotherexample.com'];\n$userInput = $_GET['url'];\n\n// Validate URL\nif (filter_var($userInput, FILTER_VALIDATE_URL)) {\n    $parsedUrl = parse_url($userInput);\n    if (in_array($parsedUrl['host'], $allowedDomains)) {\n        header(\"Location: \" . $userInput);\n    } else {\n        // Handle invalid domain\n        echo \"Invalid URL domain.\";\n    }\n} else {\n    // Handle invalid URL\n    echo \"Invalid URL.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n\nThese links were verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-6b72587f-8a32-4c7c-9748-4521ce72e188",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-79b3500f-ed14-46a8-9a98-26e4479ca0f2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6384a6b1-3f0c-4a40-a17b-64580d572a6d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-291a3622-caf2-47ca-abc3-53f865fe7a93",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-116f0cb2-8779-4962-9215-89df0790fa6b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6831b9c4-0506-4a3a-b961-e4efb44d6af9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-05d0a342-3bd9-4460-9437-dff4f212c86d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d693635b-5a26-4d6f-8343-64d5c5f77fed",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-cd82a677-8e71-433f-89ce-a66dd4c557e4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7fdde30b-abb5-4322-adab-88478c55ce8c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Data\" in PHP arises when user input from GET, POST, or COOKIE data is directly output to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the `$_POST['field']` data is being used directly in an HTML context without sufficient encoding, making it susceptible to XSS.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before displaying it in the browser. Use appropriate encoding functions based on the context in which the data will be used. For HTML contexts, use `htmlspecialchars()` or a similar function to encode special characters.\n\n### Source Code Fix Recommendation\n\nHere's a fixed version of the provided code snippet:\n\n```php\n<?php\n// Ensure that the htmlescape function is defined to properly escape HTML entities\nfunction htmlescape($data) {\n    return htmlspecialchars($data, ENT_QUOTES, 'UTF-8');\n}\n\n// Use the htmlescape function to encode the POST data\necho \"<input type='hidden' size='25' name='\" . htmlescape($_POST['field']) . \"[alternative_email][]'>\";\n?>\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly. The `htmlspecialchars()` function is a built-in PHP function.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-ad8e32f0-16d1-4e44-82da-565b8ae9ac09",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-38166773-66c3-44a5-ab44-910ca37392ec",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-41435902-9d1e-4579-8f2d-8bfd0672cd24",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-56387b37-aebf-4d02-a7a8-8394abb24c8c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8a8dd398-c747-43a1-91af-b4bff65457cd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c748af85-f375-4c9e-8e10-193c1343a1fd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-60ce9120-d00e-4756-bd02-6b00f0a8e95d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e092c984-4f61-4b58-b7a8-e590715bc6cd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-df9c680d-f319-43c8-9e67-822e5891708d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6d4b80d1-bc22-469f-8243-92cf3fc2f175",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7531291f-bca6-4c9f-9393-28380c89fe97",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c1f37135-5e10-4ed2-b423-3125e4e80538",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-2711bab1-0d16-43c4-99fc-021382dc6203",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-06880bc9-d969-41e0-a74f-069e0c5b8f4d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-34ac0bc5-7ee3-4fde-99a1-084d296e6ff4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Echoing Unencoded Values from GET/POST/COOKIE\" in PHP arises when user input is directly echoed or printed to the web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code example, the value from `$_POST['event']` is directly echoed, which can be exploited if the input is not properly sanitized and encoded.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Ensure that the input conforms to the expected format and type.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use functions like `htmlspecialchars()` in PHP to convert special characters to HTML entities.\n3. **Use Security Libraries**: Utilize libraries and frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the given code, ensure that the output is properly encoded before being echoed:\n\n```php\n<?php\n// Assuming Planning::deleteEvent() returns a string\n$event = Planning::deleteEvent($_POST['event']);\n\n// Encode the output to prevent XSS\necho htmlspecialchars($event, ENT_QUOTES, 'UTF-8');\n?>\n```\n\n### Library Dependencies\n\nThe provided code example does not require any external libraries to execute properly. It relies on PHP's built-in functions.\n\n### Relevant OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-eb081032-16a4-42e7-a9ec-e40959b14805",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-fe0affb7-533f-4edd-87b1-c1871eb7085c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Data\" in PHP refers to a Cross-Site Scripting (XSS) issue where user input from GET, POST, or COOKIE data is displayed on a web page without proper encoding. This can allow attackers to inject malicious scripts into web pages viewed by other users, potentially leading to session hijacking, defacement, or other malicious activities.\n\nIn the provided code example, the function `Planning::cloneEvent($_POST['event'])` is used within an `echo` statement, which outputs the data directly to the browser. If `$_POST['event']` contains untrusted data, it can lead to an XSS vulnerability.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Validate all incoming data to ensure it meets the expected format and type.\n2. **Output Encoding**: Encode data before outputting it to the browser. Use functions like `htmlspecialchars()` in PHP to convert special characters to HTML entities.\n3. **Use Security Libraries**: Utilize libraries or frameworks that provide built-in protection against XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the XSS vulnerability in the given code, ensure that the output is properly encoded before being displayed:\n\n```php\n<?php\n// Assuming Planning::cloneEvent() returns a string that needs to be displayed\n$eventData = Planning::cloneEvent($_POST['event']);\n\n// Encode the output to prevent XSS\necho htmlspecialchars($eventData, ENT_QUOTES, 'UTF-8');\n```\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it uses core PHP functions.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-75d12a80-1e41-4c2b-8bba-ed7cb08147dc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-135b1a5d-c3ee-415e-a901-cf4ad2a7d3e2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-64398024-79c1-44f6-b79b-2f3df8557803",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1c413099-a3e5-4d0f-b2f7-18ba12202776",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-df173684-6153-4d57-b542-0f2f4a572a11",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-1249eccd-4d0c-4e1f-9995-925fb99e81f7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-026cd771-fa19-4c09-bd83-891c1e235f8f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b22885b0-b922-4519-8bdb-dd608d42087f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7bce7070-0fcb-41ef-9ee4-96828ef03bca",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-848de88c-5a1d-4bd8-94a0-497ad30b279c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-812d92dd-2f4e-4bcc-bf1a-6ffe78e98b25",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-39b9b41c-029d-4a32-b0aa-59f791dcc0ea",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-574a7f17-ff83-41bd-9285-ec2d190daf06",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-619bf6c2-b3c1-499f-a546-9fda764ed1a9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-68cbcb0e-ec8b-45ef-8f56-fac20b8417c6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e1c4430f-0055-497d-8e1b-a56538dd58c3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-f0be9de3-7258-4f13-97a0-2bd04452b6b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2025-30693 in pkg oci/mariadb@11.4?tag=11.4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2025-30693 in pkg oci/mariadb@11.4?tag=11.4"
              }
            }
          ]
        },
        {
          "ruleId": "glog-8d56f7f0-894f-4925-acd1-c564e6fed056",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Vulnerability CVE-2018-17057 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2018-17057 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-a80c92ab-7be7-4ced-acce-a61cf6e908fe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2025-21490 in pkg oci/mariadb@11.4?tag=11.4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2025-21490 in pkg oci/mariadb@11.4?tag=11.4"
              }
            }
          ]
        },
        {
          "ruleId": "glog-1455cc8e-f1e6-437e-aca8-d244697529d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2025-30722 in pkg oci/mariadb@11.4?tag=11.4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2025-30722 in pkg oci/mariadb@11.4?tag=11.4"
              }
            }
          ]
        },
        {
          "ruleId": "glog-2ffcfaba-c2f7-4c21-bf1d-e9768a603203",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2024-32489 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2024-32489 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-430f32c8-18e0-4022-8609-9474c9a91f55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2024-56519 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2024-56519 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-dce4abc1-e25a-442a-8583-cba5f930870e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2023-52969 in pkg oci/mariadb@11.4?tag=11.4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2023-52969 in pkg oci/mariadb@11.4?tag=11.4"
              }
            }
          ]
        },
        {
          "ruleId": "glog-e622da54-8d5e-4d01-8934-2676d2600c39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2024-51058 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2024-51058 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-326dd067-f09a-4d01-b219-bc77d2b7518c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2023-52971 in pkg oci/mariadb@11.4?tag=11.4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2023-52971 in pkg oci/mariadb@11.4?tag=11.4"
              }
            }
          ]
        },
        {
          "ruleId": "glog-24138eb2-596e-438f-963b-a726f2964fbe",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Vulnerability CVE-2024-56522 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2024-56522 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-1d692a1f-84a8-4d90-ad35-1ac465f19394",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2023-52970 in pkg oci/mariadb@11.4?tag=11.4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2023-52970 in pkg oci/mariadb@11.4?tag=11.4"
              }
            }
          ]
        },
        {
          "ruleId": "glog-9b910455-cc06-4eac-ab0c-a337fa6f7bca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2024-56527 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2024-56527 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-3b194952-94b3-4613-8fa8-b1e9ba7f928b",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Vulnerability CVE-2024-56521 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2024-56521 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-1c9f922b-176f-4e5c-ae95-af6c4680bf70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Vulnerability CVE-2024-22640 in pkg composer/tecnickcom/tcpdf@6.10.0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lockfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1
                }
              },
              "message": {
                "text": "Vulnerability CVE-2024-22640 in pkg composer/tecnickcom/tcpdf@6.10.0"
              }
            }
          ]
        },
        {
          "ruleId": "glog-2aceac8d-fe83-4035-ad9e-f1d5d1f5b142",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3737,
                  "startColumn": 22,
                  "endLine": 3737,
                  "endColumn": 31,
                  "charOffset": 141198,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141198,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141198,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141198,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f566f6c2-44c6-4669-aa8d-4dd05d387778",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3741,
                  "startColumn": 24,
                  "endLine": 3741,
                  "endColumn": 33,
                  "charOffset": 141472,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141472,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141472,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141472,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f87cf636-49bf-4b02-bbaa-648d5a272caf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3736,
                  "startColumn": 22,
                  "endLine": 3736,
                  "endColumn": 31,
                  "charOffset": 141143,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141143,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141143,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141143,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4bd1a073-2ff4-43eb-9f64-4de94f4a374b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3710,
                  "startColumn": 16,
                  "endLine": 3710,
                  "endColumn": 25,
                  "charOffset": 140047,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140047,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140047,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140047,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-605c5b26-84ab-46aa-90fe-c8e5991feed9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3712,
                  "startColumn": 21,
                  "endLine": 3712,
                  "endColumn": 30,
                  "charOffset": 140131,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140131,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140131,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140131,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b4e96366-01af-4fa5-86f0-162281cab17f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3709,
                  "startColumn": 19,
                  "endLine": 3709,
                  "endColumn": 28,
                  "charOffset": 140007,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-03f20651-7bb9-4d9b-89bb-44f40ac8b544",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3678,
                  "startColumn": 29,
                  "endLine": 3678,
                  "endColumn": 38,
                  "charOffset": 139244,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 139244,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 139244,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 139244,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-219ab134-149c-493f-8ca6-a8d984e588a8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3664,
                  "startColumn": 65,
                  "endLine": 3664,
                  "endColumn": 74,
                  "charOffset": 138892,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138892,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138892,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138892,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-12453b24-1a7f-4a91-9c55-352b8d6af11a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3664,
                  "startColumn": 27,
                  "endLine": 3664,
                  "endColumn": 36,
                  "charOffset": 138854,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138854,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138854,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138854,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-638eb193-a519-4bdd-b702-cf8ae63274c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3644,
                  "startColumn": 16,
                  "endLine": 3644,
                  "endColumn": 25,
                  "charOffset": 138111,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138111,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138111,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138111,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d2ccaff0-63fc-4330-a961-7530c5e591ff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3659,
                  "startColumn": 29,
                  "endLine": 3659,
                  "endColumn": 38,
                  "charOffset": 138498,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138498,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138498,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138498,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-2016c4f9-0be0-471e-8444-cab06871da24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3642,
                  "startColumn": 37,
                  "endLine": 3642,
                  "endColumn": 46,
                  "charOffset": 137993,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137993,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137993,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137993,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-db6d0d5c-2e12-40e8-a8b2-c65be32ec28c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3643,
                  "startColumn": 16,
                  "endLine": 3643,
                  "endColumn": 25,
                  "charOffset": 138037,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138037,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138037,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138037,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-405ed5a9-76df-460e-bbed-d67f725b765b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3640,
                  "startColumn": 19,
                  "endLine": 3640,
                  "endColumn": 28,
                  "charOffset": 137908,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137908,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137908,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137908,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-010f8eff-f2bf-458d-8b2e-2a022d317fe5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3639,
                  "startColumn": 23,
                  "endLine": 3639,
                  "endColumn": 32,
                  "charOffset": 137863,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-70b69246-b05a-4711-bd0f-709d6055f3bd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3634,
                  "startColumn": 24,
                  "endLine": 3634,
                  "endColumn": 33,
                  "charOffset": 137716,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-75676500-5ec9-4769-b376-5c761e46f33a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3633,
                  "startColumn": 45,
                  "endLine": 3633,
                  "endColumn": 54,
                  "charOffset": 137664,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137664,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137664,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137664,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-57404d0b-b8d3-4ace-a87c-0f016af66d33",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3630,
                  "startColumn": 20,
                  "endLine": 3630,
                  "endColumn": 29,
                  "charOffset": 137510,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-59565372-6a46-49e9-8cf3-c5509dc8f272",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3632,
                  "startColumn": 24,
                  "endLine": 3632,
                  "endColumn": 33,
                  "charOffset": 137586,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ea0201cb-07d3-4578-a224-469a55600359",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3626,
                  "startColumn": 20,
                  "endLine": 3626,
                  "endColumn": 29,
                  "charOffset": 137336,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137336,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137336,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137336,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-123014f3-9f3d-43e5-a39b-bd6f097484ea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3625,
                  "startColumn": 16,
                  "endLine": 3625,
                  "endColumn": 25,
                  "charOffset": 137272,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-121ce50a-75ff-4be3-a7f3-7148f1c27648",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3621,
                  "startColumn": 16,
                  "endLine": 3621,
                  "endColumn": 25,
                  "charOffset": 137147,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137147,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137147,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137147,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-dde465b2-dfaf-4b81-b3a1-12d015afa2bf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3620,
                  "startColumn": 16,
                  "endLine": 3620,
                  "endColumn": 25,
                  "charOffset": 137098,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-8fbecb2f-c90b-476d-9aca-3d0f097936eb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3616,
                  "startColumn": 20,
                  "endLine": 3616,
                  "endColumn": 29,
                  "charOffset": 136996,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136996,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136996,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136996,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d5053f84-6425-4af6-9727-a6331da9c7a9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3615,
                  "startColumn": 41,
                  "endLine": 3615,
                  "endColumn": 50,
                  "charOffset": 136948,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136948,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136948,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136948,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-559d4a9a-ad22-415b-8590-2346d811242c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3614,
                  "startColumn": 20,
                  "endLine": 3614,
                  "endColumn": 29,
                  "charOffset": 136874,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4a9fb2c6-2dac-49fb-9f77-630f41919bcc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3610,
                  "startColumn": 24,
                  "endLine": 3610,
                  "endColumn": 33,
                  "charOffset": 136782,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-48d13f19-4eaf-49c7-8a66-b10d9abff50a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3608,
                  "startColumn": 24,
                  "endLine": 3608,
                  "endColumn": 33,
                  "charOffset": 136678,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a5953289-c560-42d8-9e80-96270912de29",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3604,
                  "startColumn": 24,
                  "endLine": 3604,
                  "endColumn": 33,
                  "charOffset": 136489,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136489,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136489,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136489,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7065f596-f09c-4e20-b2ac-c0fc292af97b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3603,
                  "startColumn": 20,
                  "endLine": 3603,
                  "endColumn": 29,
                  "charOffset": 136421,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136421,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136421,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136421,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-1168a5a6-13cf-4b4c-b07a-610e35b104d0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3599,
                  "startColumn": 20,
                  "endLine": 3599,
                  "endColumn": 29,
                  "charOffset": 136272,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f91adb3a-29e0-44e8-922f-4d3d3640dff3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3596,
                  "startColumn": 16,
                  "endLine": 3596,
                  "endColumn": 25,
                  "charOffset": 136116,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136116,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136116,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136116,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5afc7c8a-8d2d-425e-979f-513f5552025c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3593,
                  "startColumn": 16,
                  "endLine": 3593,
                  "endColumn": 25,
                  "charOffset": 135977,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135977,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135977,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135977,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b2d0d86a-308b-47e7-98da-168bf63521fe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3590,
                  "startColumn": 20,
                  "endLine": 3590,
                  "endColumn": 29,
                  "charOffset": 135879,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135879,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135879,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135879,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a187ecf9-e123-4dc1-9cd9-7922a7a09a54",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3588,
                  "startColumn": 20,
                  "endLine": 3588,
                  "endColumn": 29,
                  "charOffset": 135725,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135725,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135725,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135725,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-13b94af8-c2dc-4b5e-a450-dcfb9903021a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3586,
                  "startColumn": 37,
                  "endLine": 3586,
                  "endColumn": 46,
                  "charOffset": 135676,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135676,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135676,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135676,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4e81a611-eaac-419d-97b3-a0af01b05c39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3583,
                  "startColumn": 35,
                  "endLine": 3583,
                  "endColumn": 44,
                  "charOffset": 135538,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135538,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135538,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135538,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a5021e6b-4c6d-46dc-90ae-df4f7a7da755",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3579,
                  "startColumn": 12,
                  "endLine": 3579,
                  "endColumn": 21,
                  "charOffset": 135396,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4ec99202-e12a-4411-bf88-5c7c2b913594",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3575,
                  "startColumn": 8,
                  "endLine": 3575,
                  "endColumn": 17,
                  "charOffset": 135291,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135291,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135291,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135291,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d60992be-6b0a-4427-84dc-277d51c99741",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3573,
                  "startColumn": 12,
                  "endLine": 3573,
                  "endColumn": 21,
                  "charOffset": 135245,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135245,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135245,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135245,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d0dd38a8-26a7-4cfe-9a91-46067696a6b6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3570,
                  "startColumn": 18,
                  "endLine": 3570,
                  "endColumn": 27,
                  "charOffset": 135148,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135148,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135148,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135148,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6bc71818-b927-4515-8e47-b9d77b0e6b1b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3571,
                  "startColumn": 16,
                  "endLine": 3571,
                  "endColumn": 25,
                  "charOffset": 135187,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135187,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135187,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135187,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3e7a1602-ee08-4c91-9d54-7e0f10ab1478",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3567,
                  "startColumn": 12,
                  "endLine": 3567,
                  "endColumn": 21,
                  "charOffset": 135077,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135077,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135077,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135077,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9e3bbafe-5c2a-4271-95b9-391428db8963",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3565,
                  "startColumn": 16,
                  "endLine": 3565,
                  "endColumn": 25,
                  "charOffset": 135017,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135017,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135017,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135017,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-1877ce40-bfb9-4853-a516-d3be0fe52e74",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3564,
                  "startColumn": 18,
                  "endLine": 3564,
                  "endColumn": 27,
                  "charOffset": 134976,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a7157a13-a24a-4438-bd86-44bd9c2d6398",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3560,
                  "startColumn": 12,
                  "endLine": 3560,
                  "endColumn": 21,
                  "charOffset": 134885,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134885,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134885,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134885,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7b25a6c8-0c5f-44e0-a5e7-1343c940b557",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3558,
                  "startColumn": 22,
                  "endLine": 3558,
                  "endColumn": 31,
                  "charOffset": 134837,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6e2a8b30-7ee8-4967-9822-4d45104bed6f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3550,
                  "startColumn": 12,
                  "endLine": 3550,
                  "endColumn": 21,
                  "charOffset": 134631,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134631,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134631,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134631,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-664aea9d-a08e-49f2-9e7b-85ea892bc00e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3553,
                  "startColumn": 8,
                  "endLine": 3553,
                  "endColumn": 17,
                  "charOffset": 134681,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134681,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134681,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134681,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b861ed83-d19c-4296-afd3-7560d2760fa5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3549,
                  "startColumn": 18,
                  "endLine": 3549,
                  "endColumn": 27,
                  "charOffset": 134585,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134585,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134585,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134585,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-aab769e3-fd72-4e87-8f38-181647fd9ecc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3546,
                  "startColumn": 12,
                  "endLine": 3546,
                  "endColumn": 21,
                  "charOffset": 134523,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134523,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134523,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134523,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-15af5fde-0e5a-4eb8-a5ca-ef50578b7c49",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3545,
                  "startColumn": 18,
                  "endLine": 3545,
                  "endColumn": 27,
                  "charOffset": 134484,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134484,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134484,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134484,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9435d2b0-9808-4963-bbb1-89fe39e4f784",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3544,
                  "startColumn": 8,
                  "endLine": 3544,
                  "endColumn": 17,
                  "charOffset": 134405,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-68cd0cf5-019c-445c-ae31-e479016103e1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3542,
                  "startColumn": 35,
                  "endLine": 3542,
                  "endColumn": 44,
                  "charOffset": 134353,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134353,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134353,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134353,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b808a34c-4926-4c70-a9b0-62e6348ddb95",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3542,
                  "startColumn": 8,
                  "endLine": 3542,
                  "endColumn": 17,
                  "charOffset": 134326,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134326,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134326,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134326,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c35bd170-8ebb-4412-8df1-3708db6ca85a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3538,
                  "startColumn": 16,
                  "endLine": 3538,
                  "endColumn": 25,
                  "charOffset": 134260,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134260,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134260,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134260,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-fd7db7cb-0b7b-4ec6-8de6-b6871d6b20da",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3537,
                  "startColumn": 16,
                  "endLine": 3537,
                  "endColumn": 25,
                  "charOffset": 134216,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134216,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134216,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134216,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-dbf8803e-a920-422e-845a-9436243040c1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3535,
                  "startColumn": 16,
                  "endLine": 3535,
                  "endColumn": 25,
                  "charOffset": 134138,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134138,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134138,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134138,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-799e8e93-0f36-4d92-be85-4caf4439dc55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3534,
                  "startColumn": 16,
                  "endLine": 3534,
                  "endColumn": 25,
                  "charOffset": 134073,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134073,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134073,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134073,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6fc71d88-5b84-4c56-a384-acc103e47cb1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/CommonGLPI.php"
                },
                "region": {
                  "startLine": 1232,
                  "startColumn": 24,
                  "endLine": 1232,
                  "endColumn": 33,
                  "charOffset": 38925,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38925,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38925,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38925,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d884efc0-6a08-468f-8f68-2ca8db8009fd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/CommonGLPI.php"
                },
                "region": {
                  "startLine": 1231,
                  "startColumn": 55,
                  "endLine": 1231,
                  "endColumn": 64,
                  "charOffset": 38873,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38873,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38873,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38873,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6f620820-bf55-4d92-81c1-732ff125c5bd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3533,
                  "startColumn": 16,
                  "endLine": 3533,
                  "endColumn": 25,
                  "charOffset": 134027,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134027,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134027,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134027,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a2490f14-d5ba-41d9-9831-42462a726596",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/CommonGLPI.php"
                },
                "region": {
                  "startLine": 1231,
                  "startColumn": 18,
                  "endLine": 1231,
                  "endColumn": 27,
                  "charOffset": 38836,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/CommonGLPI.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-1417d8b1-3daa-4467-a9bb-252058cdc551",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3532,
                  "startColumn": 16,
                  "endLine": 3532,
                  "endColumn": 25,
                  "charOffset": 133978,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133978,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133978,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133978,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e6eca989-95be-4550-8494-48eb833d9536",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3530,
                  "startColumn": 49,
                  "endLine": 3530,
                  "endColumn": 58,
                  "charOffset": 133863,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5b58a53f-3ac7-4e3e-b614-a91d31b2f7d4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3530,
                  "startColumn": 22,
                  "endLine": 3530,
                  "endColumn": 31,
                  "charOffset": 133836,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-dcdd7210-b2b0-4527-b7b1-e6ac7f766ff5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3529,
                  "startColumn": 48,
                  "endLine": 3529,
                  "endColumn": 57,
                  "charOffset": 133792,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133792,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133792,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133792,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-92e83b16-0c74-4a56-8a3d-b5fec5e3f273",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3529,
                  "startColumn": 18,
                  "endLine": 3529,
                  "endColumn": 27,
                  "charOffset": 133762,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133762,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133762,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133762,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c2a8452c-3ca4-4632-b98e-fae914864127",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3524,
                  "startColumn": 12,
                  "endLine": 3524,
                  "endColumn": 21,
                  "charOffset": 133554,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133554,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133554,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133554,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6edba08c-c572-45fa-b368-536607c960ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3523,
                  "startColumn": 46,
                  "endLine": 3523,
                  "endColumn": 55,
                  "charOffset": 133515,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133515,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133515,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133515,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-19b1d0bf-5b76-479f-bbf2-02b15047e2ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3523,
                  "startColumn": 12,
                  "endLine": 3523,
                  "endColumn": 21,
                  "charOffset": 133481,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6dfa3284-f369-46f7-8e48-d4ff694bb8f2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3519,
                  "startColumn": 24,
                  "endLine": 3519,
                  "endColumn": 33,
                  "charOffset": 133364,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d86c9b0d-d4d0-48ff-a318-d1b3df25d0c9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3516,
                  "startColumn": 26,
                  "endLine": 3516,
                  "endColumn": 35,
                  "charOffset": 133186,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        }