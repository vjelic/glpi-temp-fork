{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-0bba9b7d-1687-4d3a-8e7a-9d39d830a508",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-666acb47-cd9b-49a2-b1f4-9e0d44ded24e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-092376ae-b592-4cd2-9615-835c2397cb5d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-58da0288-e6f4-43de-a602-5bdd56a04a39",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3c972713-0bab-4c2f-8f5e-eaba5028092a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9494d974-9076-4564-838c-3d5aaa783dfd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b21e48e1-8cff-435e-8787-ffe927d154c4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5e70c9c7-045c-457e-9755-6877f9b129a1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b7d1dc6b-d9e7-454a-a1fd-b24f9f4c0081",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-923eb53f-eb0d-41c1-a263-7d27eb6fbfe4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6ae9eeb6-7151-4412-8418-2fa45268af89",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-17c8b36f-ab33-4dbb-8781-1305b1a57f6c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d25f8f16-6b96-40b7-8806-af40c7b43b09",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-068a2401-5f75-40bb-91e2-f89ffc544211",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-78cbe763-b325-4dfb-9df1-9290f9256cab",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3c01a339-7565-44c0-ba81-15a2f9090178",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ca4ca102-f3f0-4e73-b3e4-a246c9b3cd49",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-41afd54f-666e-4fa6-a3f2-79a9d5bdec44",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0501d5bc-8512-45ea-b0a3-16c1e7a27c41",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-afe2d9da-74ec-45fb-b552-6de9fff0632f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f5a90aa1-7c4d-4087-986e-fe58aa6a862e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5d2a43cd-0e38-43a4-b0c8-c06bef7b7e8b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9bbde63d-80b6-4c06-b8b9-7dfb079025b2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d1ef0bfb-08ef-471a-b2c6-ae479814a6f0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3e473962-ec7c-42ac-8ff7-e5593a8470e5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5f0ed6c8-1c2b-413f-90cf-034de34197dd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c9e9accc-0046-46ab-96a3-acd094ab1ab3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d812da17-d720-4351-8bce-aaaf8f011ba5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a261eb19-4ed8-496a-801f-5710f27a118d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6507154b-f51c-4797-aa33-33310b1294ce",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b0254b5e-55ae-451f-98b3-e056e5557072",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b80418f8-01a7-40c7-bda4-6270d209120b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-87054e97-e9c6-458d-89d1-b714d105fcb5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ce61b395-9369-443f-b502-74ec18be2470",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7a673a62-aa2a-48a0-a0be-a458813e04dd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-7334e209-897e-404c-b602-735e8a4a42d5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3f67b846-82fa-42dd-a9dd-cc36d3e3507e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-09927f2a-e1c4-42b4-93bc-d5ad6e712ad1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-03df2f0e-8bad-43cd-b4d3-3b6f05472f8e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a8e0e331-befb-4818-aed2-5ff1cc90a396",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-82269ed8-65c6-4efe-b212-c68cc3b02d68",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-65d5281b-9fd9-451f-8dfd-948cbd3607e9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3542ecee-12f1-42da-8655-09fc26a1dd90",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e83cfe9a-6d6a-49cd-8f1d-c11c6b84f0c7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ead5cf53-b845-4f3f-9635-0b80a58b486b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a25ad6a5-2516-4f79-b0f7-517286120738",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0cc15c80-d6d9-4650-b3ea-476cb16a7074",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-934ccc50-adcf-472c-ae00-a7c309b8d16a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-91612423-2e56-4994-889a-3f17c3c75087",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-07daaad1-c9de-43a4-bdc7-f2562d9a204d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5fafd5ef-804e-4fb8-b53a-d117dd83d951",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d05e7183-5944-44cd-a483-d4dd86bd24a5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-304c88f6-6c96-4516-9b22-91a10149578e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-450aa015-8694-45bc-aa29-89b33a97770c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d3fbb0d0-6aca-4631-895e-81c12695417c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b1d5d27c-8d00-4b98-b29c-f8bf4b20b6a4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6656f504-c4a9-439c-9c63-ce5197183a9c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e1793fd7-5cd0-48a7-82e0-a92d8404a3b2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e3635952-2ab6-4d15-8e69-8a1fb4fbcfd0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-78ba4e3a-319d-4a36-95a3-589cd2f4b838",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-46b667bb-b7dc-46f2-82e2-adfc1b6a1264",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-45295054-e231-4044-a569-4fb82af63a20",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-aafb7e63-d6da-4697-9e16-a798758d529d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-f52c8f39-73b8-4136-a3c1-11e33ed5b992",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-98bb7f7d-7fb3-469e-9e4d-6e55e5de1bb5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b0db5a4b-423d-4c0a-9145-90adcc401d2e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-b1f92a6c-cf97-4040-bdef-28cb50036513",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-82d91d4d-d627-4a1b-aa15-1fb5e99a1781",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-a3ad1252-3412-4321-8574-eba36e22f1d1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-85ce857f-4815-4598-abd5-3e0ccac83f2b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0923451a-8b4c-4bc8-b375-915ff04fd872",
              "name": "BoringsslHardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol: BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440012"
                ]
              }
            },
            {
              "id": "glog-10caec62-0280-4650-a27c-be36d72550c9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ac940f82-f55e-4122-9c3f-a03a6921b67e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c0cb0910-b36e-402b-ad5c-4790b22c6be9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-4ef311e5-2bd0-4915-a91c-92ee5a8f5916",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-61096001-5a8b-4a88-97cb-1b0667fddf16",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-d3930c89-016b-4b42-8c78-8febbaa25533",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-588c3ffb-d43e-4431-a324-cdad2d9de493",
              "name": "BoringsslHardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "BoringSSL: Hard-coded SSL/TLS Protocol: BoringSSL: Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440012"
                ]
              }
            },
            {
              "id": "glog-5fd8b87b-5094-4a6b-b6d5-acbd67112502",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-2e90fd52-2adf-416f-9c04-a19636a25ae7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ca13a70b-28c0-4eb6-9c0d-d7fc602b529f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-c67b308d-631c-4de5-a3ca-317f113cc54b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-ffb2f3a9-ec38-49c3-ba91-7766a10316ef",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5ec2d50b-5dd9-430d-aa33-f42d10e55f7b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-95c16430-fe9a-4709-a3ca-4da89398e4ef",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Avoid Using the DES Symmetric Block Cipher\" vulnerability in PHP arises from the use of the Data Encryption Standard (DES) algorithm, which is considered weak and insecure due to its short key length of 56 bits. This makes it susceptible to brute-force attacks. DES has been deprecated in favor of more secure algorithms like AES (Advanced Encryption Standard).\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to replace DES with a more secure encryption algorithm such as AES. AES provides stronger security with key sizes of 128, 192, or 256 bits.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to replace DES with AES in PHP using the OpenSSL extension:\n\n```php\n<?php\n\n// Original DES encryption (insecure)\nfunction encryptWithDES($data, $key) {\n    $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('des'));\n    return openssl_encrypt($data, 'des', $key, 0, $iv) . '::' . base64_encode($iv);\n}\n\n// Secure AES encryption\nfunction encryptWithAES($data, $key) {\n    $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('aes-256-cbc'));\n    return openssl_encrypt($data, 'aes-256-cbc', $key, 0, $iv) . '::' . base64_encode($iv);\n}\n\n// Example usage\n$data = \"Sensitive Data\";\n$key = \"your-256-bit-secret-key\"; // Ensure the key length matches the AES key size\n\n$encryptedData = encryptWithAES($data, $key);\necho \"Encrypted Data: \" . $encryptedData;\n?>\n```\n\n### Library Dependencies\n\n- PHP with OpenSSL extension enabled.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-327: Use of a Broken or Risky Cryptographic Algorithm](https://cwe.mitre.org/data/definitions/327.html)"
              },
              "properties": {
                "tags": [
                  "DS106863"
                ]
              }
            },
            {
              "id": "glog-29aaa5f0-c600-4200-b15c-6c6b70935487",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when user input is used to construct URLs without proper validation or sanitization. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or even remote code execution (RCE) if the input is used in a context that allows for code execution. The vulnerability is often exploited by attackers to redirect users to malicious sites or to perform unauthorized actions on behalf of the user.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure that only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Do not directly use user input to construct URLs. Instead, use predefined, safe URLs or map user inputs to safe URLs.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential vulnerabilities.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n// Original vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: http://$userInput\");\n\n// Fixed code\n$userInput = $_GET['url'];\n\n// Validate the URL\nif (filter_var($userInput, FILTER_VALIDATE_URL)) {\n    // Use a whitelist of allowed domains\n    $allowedDomains = ['example.com', 'anotherexample.com'];\n    $parsedUrl = parse_url($userInput);\n    \n    if (in_array($parsedUrl['host'], $allowedDomains)) {\n        header(\"Location: $userInput\");\n        exit;\n    } else {\n        // Handle invalid domain\n        echo \"Invalid URL.\";\n    }\n} else {\n    // Handle invalid URL\n    echo \"Invalid URL.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-d0b4fdf1-5471-4970-bce3-3a7894a133ae",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-8567225e-8746-4184-9053-f18b058100a4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-280c4058-b6a2-4aab-ae8d-67cfaeeba5ab",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when user input is directly used to construct URLs without proper validation or sanitization. This can lead to various security issues, such as Server-Side Request Forgery (SSRF), where an attacker can manipulate the URL to make requests to unintended destinations, potentially accessing internal services or sensitive data.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Environment Configuration**: Disable URL fopen wrappers if not needed by setting `allow_url_fopen` to `Off` in `php.ini`.\n4. **Network Segmentation**: Ensure that sensitive internal services are not accessible from the web-facing application layer.\n\n### Source Code Fix Recommendation\n\nGiven the vulnerability sink `http://{$proxy_creds}`, ensure that `$proxy_creds` is properly validated and sanitized before use. Here's a code example demonstrating a secure approach:\n\n```php\n<?php\n\n// Example of a secure way to handle URL construction\n\n// Assume $proxy_creds is obtained from user input\n$proxy_creds = $_GET['proxy_creds'] ?? '';\n\n// Validate the URL\nif (filter_var($proxy_creds, FILTER_VALIDATE_URL)) {\n    // Safe to use the URL\n    $url = $proxy_creds;\n    // Proceed with using the URL\n    // Example: file_get_contents($url);\n} else {\n    // Handle invalid URL\n    echo \"Invalid URL provided.\";\n}\n\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Server-Side Request Forgery (SSRF) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-cb5b3abc-c7fc-4f42-a1ad-e79759af78dc",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-0736d56b-92d8-4dc0-a14b-98ba4102fcf8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Displaying Unencoded GET/POST/COOKIE Values\" in PHP arises when user input from GET, POST, or COOKIE requests is directly output to a web page without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker injects malicious scripts into web pages viewed by other users. In the provided code snippet, the value from `$_POST['reserve'][\"end\"]` is directly used in the `Html::hidden` function, which may lead to XSS if not properly encoded.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user input before displaying it in the HTML context. Use appropriate encoding functions provided by your framework or language to ensure that special characters are safely encoded.\n\n### Source Code Fix Recommendation\n\nTo fix the specific vulnerability in the code snippet, ensure that the value from `$_POST['reserve'][\"end\"]` is properly encoded before being used. Assuming `Html::hidden` does not automatically encode values, you can use PHP's `htmlspecialchars` function to encode the input:\n\n```php\necho Html::hidden('end', ['value' => htmlspecialchars($_POST['reserve'][\"end\"], ENT_QUOTES, 'UTF-8')]);\n```\n\n### Library Dependencies\n\nThe code example appears to use a custom or framework-specific `Html` class. Ensure that the following dependencies are included in your project:\n\n- The PHP framework or library that provides the `Html` class (e.g., Yii, Laravel, etc.).\n- PHP version that supports the `htmlspecialchars` function (PHP 4 >= 4.0.3, PHP 5, PHP 7, PHP 8).\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-c0c3c886-3892-4f13-91d1-b9145b11e08d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using untrusted input, which can lead to various security issues such as open redirects, server-side request forgery (SSRF), or even remote code execution in severe cases. This vulnerability arises when user input is directly used to build URLs without proper validation or sanitization.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected values are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input**: Avoid using direct user input in URL construction. Instead, use predefined, safe values.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of potential vulnerabilities.\n\n### Source Code Fix Recommendation\n\n```php\n<?php\n// Original vulnerable code\n$userInput = $_GET['url'];\nheader(\"Location: \" . $userInput);\n\n// Fixed code\n$userInput = $_GET['url'];\n\n// Validate the URL\nif (filter_var($userInput, FILTER_VALIDATE_URL)) {\n    // Use a whitelist of allowed domains\n    $allowedDomains = ['cisco.com'];\n    $urlHost = parse_url($userInput, PHP_URL_HOST);\n\n    if (in_array($urlHost, $allowedDomains)) {\n        header(\"Location: \" . $userInput);\n        exit();\n    } else {\n        // Handle invalid domain\n        echo \"Invalid URL domain.\";\n    }\n} else {\n    // Handle invalid URL\n    echo \"Invalid URL.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It relies solely on PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-e1d2c64b-7b67-44e8-9243-eb743b851d3a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability \"XSS: Avoid Echoing Unencoded Values from GET/POST/COOKIE\" in PHP arises when user input is directly echoed or outputted to the browser without proper encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the given code snippet, the value from `$_POST['reserve'][\"begin\"]` is directly used in the `Html::hidden` function, which may lead to XSS if not properly encoded.\n\n### General Mitigation Advice\n\nTo mitigate XSS vulnerabilities, always encode user inputs before outputting them to the browser. Use appropriate encoding functions based on the context (HTML, JavaScript, URL, etc.). Additionally, consider using security libraries or frameworks that automatically handle encoding.\n\n### Source Code Fix Recommendation\n\nTo fix the specific vulnerability in the code snippet, ensure that the value from `$_POST['reserve'][\"begin\"]` is properly encoded before being used. Assuming `Html::hidden` does not automatically encode values, you can use PHP's `htmlspecialchars` function to encode the input:\n\n```php\necho Html::hidden('begin', ['value' => htmlspecialchars($_POST['reserve'][\"begin\"], ENT_QUOTES, 'UTF-8')]);\n```\n\n### Library Dependencies\n\nThe code example uses the `Html` class, which is not a part of PHP's standard library. It is likely part of a framework or library such as Yii or a custom implementation. Ensure that the following dependencies are included in your project:\n\n- Yii Framework (if `Html` is from Yii): `yiisoft/yii2`\n- Alternatively, ensure any custom or third-party library providing the `Html` class is properly included.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "DS163877"
                ]
              }
            },
            {
              "id": "glog-4b61e105-7bcb-48be-b9a3-f93f38f3864f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-e734c2cc-b187-46fa-ad53-b63f0f7069b9",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-65880dbe-09e5-419d-afec-d50eaf8c7254",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-9a387032-bfdd-4803-bfbd-6e2233da5434",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-6184629c-9f56-4d0c-8e25-d0d604908e58",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-5675d1cd-cc97-4373-8fe8-7234e26dcfa1",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-beff21a3-8987-4206-adb6-5ffad50ebefd",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe `$_REQUEST` variable in PHP is a superglobal array that contains data from `$_GET`, `$_POST`, and `$_COOKIE`. Using `$_REQUEST` can lead to security vulnerabilities because it allows attackers to manipulate input data from multiple sources, making it difficult to validate and sanitize input properly. This can result in security issues such as Cross-Site Scripting (XSS), SQL Injection, and other injection attacks.\n\n### General Mitigation Advice\n\n1. **Use Specific Superglobals**: Instead of using `$_REQUEST`, use `$_GET`, `$_POST`, or `$_COOKIE` depending on the source of the data you expect. This makes it easier to validate and sanitize input.\n\n2. **Input Validation**: Always validate input data to ensure it meets the expected format, type, and length.\n\n3. **Input Sanitization**: Sanitize input data to remove or encode potentially harmful characters.\n\n4. **Use Prepared Statements**: When interacting with databases, use prepared statements to prevent SQL Injection.\n\n5. **Use Security Libraries**: Utilize security libraries and frameworks that provide built-in protection against common vulnerabilities.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```php\n<?php\n// Vulnerable code using $_REQUEST\n$user_input = $_REQUEST['user_input'];\necho \"User input: \" . $user_input;\n?>\n```\n\n#### Fixed Code Example\n\n```php\n<?php\n// Fixed code using specific superglobal\nif (isset($_GET['user_input'])) {\n    $user_input = htmlspecialchars($_GET['user_input'], ENT_QUOTES, 'UTF-8');\n    echo \"User input: \" . $user_input;\n} else {\n    echo \"No user input provided.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe code examples provided do not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n- [CWE-116: Improper Encoding or Escaping of Output](https://cwe.mitre.org/data/definitions/116.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS144886"
                ]
              }
            },
            {
              "id": "glog-3b5079da-9648-41e7-b727-b50a4e299d74",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or even remote code execution, depending on how the URL is used within the application.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Avoid using user input directly in URL construction. If necessary, encode the input using `urlencode()`.\n4. **Implement Allowlist**: If the application needs to redirect or fetch resources from external URLs, maintain an allowlist of trusted domains.\n5. **Use HTTPS**: Ensure all URLs use HTTPS to prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n\n// Original vulnerable code\n$url = $_GET['url'];\nheader(\"Location: $url\");\n\n// Fixed code\n$allowed_domains = ['example.com', 'anotherexample.com'];\n$url = $_GET['url'];\n\n// Validate URL\nif (filter_var($url, FILTER_VALIDATE_URL)) {\n    $parsed_url = parse_url($url);\n    if (in_array($parsed_url['host'], $allowed_domains)) {\n        header(\"Location: $url\");\n        exit;\n    }\n}\n\necho \"Invalid URL or domain not allowed.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)\n\nThese links were verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-fa2f3b83-ac85-4016-a781-cf2fb732e9ea",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured Web Address\" vulnerability in PHP occurs when a web application constructs URLs or web addresses using untrusted input without proper validation or sanitization. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or even remote code execution, depending on how the URL is used within the application.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Dynamic URL Construction**: Avoid constructing URLs dynamically using user input. If necessary, ensure strict validation and encoding.\n4. **Limit External Requests**: Restrict the application from making requests to internal or sensitive network addresses.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix a potential vulnerability when handling URLs in PHP:\n\n```php\n<?php\n// Original potentially vulnerable code\n$url = $_GET['url'];\nheader(\"Location: $url\");\n\n// Fixed code with validation\n$url = $_GET['url'];\n\n// Validate the URL\nif (filter_var($url, FILTER_VALIDATE_URL)) {\n    // Ensure the URL is to an allowed domain\n    $allowed_domains = ['example.com', 'anotherexample.com'];\n    $parsed_url = parse_url($url);\n    \n    if (in_array($parsed_url['host'], $allowed_domains)) {\n        header(\"Location: $url\");\n        exit;\n    } else {\n        echo \"Invalid domain.\";\n    }\n} else {\n    echo \"Invalid URL.\";\n}\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-d2309dd6-a6c7-4bae-9815-a1c052fde98f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using untrusted input without proper validation or sanitization. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or even remote code execution, depending on how the URL is used within the application.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Dynamic URL Construction**: Avoid constructing URLs dynamically using user input. If necessary, ensure that the input is strictly validated.\n4. **Use HTTPS**: Ensure that URLs use HTTPS to prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\nGiven the vulnerability sink `http://[fe80::92a4:26c6:99dd:2d60]:62354`, ensure that any URL construction or redirection logic is properly validated. Here's an example of how to fix this issue:\n\n```php\n<?php\n\n// Example of user input\n$userInput = 'http://[fe80::92a4:26c6:99dd:2d60]:62354';\n\n// Validate the URL\nif (filter_var($userInput, FILTER_VALIDATE_URL) === false) {\n    die('Invalid URL');\n}\n\n// Further processing with the validated URL\necho \"The URL is valid and safe to use.\";\n\n?>\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten Project](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)"
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-95f7892f-e356-4462-bb58-70429b691259",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP arises when URLs are not properly validated or sanitized before being used in the application. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or exposure of sensitive information. In the context of the provided URL, the use of an IPv6 address with a specific port could be exploited if not handled securely.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize URLs before using them in your application. Ensure that the URL conforms to expected patterns and does not contain malicious content.\n2. **Use Whitelisting**: Implement a whitelist of allowed domains or IP addresses to prevent unauthorized access.\n3. **Secure Configuration**: Ensure that your server and application configurations are secure and do not expose unnecessary services or ports.\n4. **HTTPS Enforcement**: Use HTTPS to encrypt data in transit and prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\nBelow is a PHP code example demonstrating how to securely handle URLs:\n\n```php\n<?php\n\n// Example URL\n$url = 'http://[fe80::b283:4fa3:d3f2:96b1]:62354';\n\n// Validate URL\nif (filter_var($url, FILTER_VALIDATE_URL) === false) {\n    die('Invalid URL');\n}\n\n// Parse URL components\n$parsedUrl = parse_url($url);\n\n// Whitelist of allowed IPs or domains\n$allowedHosts = ['example.com', 'fe80::b283:4fa3:d3f2:96b1'];\n\n// Check if host is in the whitelist\nif (!in_array($parsedUrl['host'], $allowedHosts)) {\n    die('Host not allowed');\n}\n\n// Use HTTPS\nif ($parsedUrl['scheme'] !== 'https') {\n    die('Only HTTPS URLs are allowed');\n}\n\n// Proceed with using the URL securely\necho 'URL is valid and secure';\n\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-e220d642-76ad-475d-b37a-fde79f3ed18e",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or even remote code execution (RCE) if the input is used in a context that allows for code execution.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Dynamic URL Construction**: Avoid constructing URLs dynamically using user input. If necessary, ensure that the input is strictly validated.\n4. **Use HTTPS**: Ensure that all URLs use HTTPS to prevent man-in-the-middle attacks.\n5. **Limit Redirects**: If redirects are necessary, limit them to a predefined set of safe URLs.\n\n### Source Code Fix Recommendation\n\n```php\n<?php\n// Example of vulnerable code\n$user_input = $_GET['url'];\nheader(\"Location: \" . $user_input);\n\n// Fixed code\n$allowed_domains = ['example.com', 'anotherexample.com'];\n$user_input = $_GET['url'];\n\n// Validate URL\nif (filter_var($user_input, FILTER_VALIDATE_URL)) {\n    $parsed_url = parse_url($user_input);\n    if (in_array($parsed_url['host'], $allowed_domains)) {\n        header(\"Location: \" . $user_input);\n        exit;\n    }\n}\n\necho \"Invalid URL or domain not allowed.\";\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external library dependencies to execute properly. It uses PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-0c1a4394-a5bc-464e-8e0f-2771401a3759",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, server-side request forgery (SSRF), or even remote code execution, depending on how the URL is used within the application.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Avoid using user input directly in URL construction. If necessary, encode the input using `urlencode()`.\n4. **Implement Access Controls**: Ensure that any URL constructed from user input does not bypass access controls or lead to unauthorized access.\n5. **Use HTTPS**: Always use HTTPS to prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n\n// Original vulnerable code\n$user_input = $_GET['url'];\n$url = \"http://192.168.1.142:62354\" . $user_input;\n\n// Mitigated code\n$user_input = $_GET['url'];\n\n// Validate the user input\nif (filter_var($user_input, FILTER_VALIDATE_URL)) {\n    // Construct the URL safely\n    $url = \"http://192.168.1.142:62354\" . urlencode($user_input);\n} else {\n    // Handle invalid URL input\n    die(\"Invalid URL provided.\");\n}\n\n// Proceed with using the $url safely\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies beyond standard PHP functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-66084e6d-7ad2-49d7-96f3-c2ac94791527",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, cross-site scripting (XSS), or even server-side request forgery (SSRF). Attackers can manipulate these URLs to redirect users to malicious sites, execute scripts in the context of the user's session, or make unauthorized requests on behalf of the server.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Do not directly use user input to construct URLs. Instead, use predefined routes or mappings.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate XSS attacks.\n5. **Use HTTPS**: Ensure all URLs use HTTPS to prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n// Example of vulnerable code\n$user_input = $_GET['url'];\nheader(\"Location: $user_input\");\n\n// Fixed code\n$allowed_domains = ['example.com', 'another-example.com'];\n$user_input = $_GET['url'];\n\n// Validate URL\nif (filter_var($user_input, FILTER_VALIDATE_URL)) {\n    $url_components = parse_url($user_input);\n    if (in_array($url_components['host'], $allowed_domains)) {\n        header(\"Location: $user_input\");\n        exit;\n    }\n}\n\n// Redirect to a safe default page if validation fails\nheader(\"Location: /default-page.php\");\nexit;\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external libraries to execute properly. It relies solely on PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-61cb9cf1-3d0b-4eaa-b8f1-1a68aa762405",
              "help": {
                "text": "",
                "markdown": "### Description of \"Unsecured URL\" Vulnerability in PHP\n\nThe \"Unsecured URL\" vulnerability in PHP occurs when a web application constructs URLs using user input without proper validation or sanitization. This can lead to various security issues, such as open redirects, cross-site scripting (XSS), or even server-side request forgery (SSRF). Attackers can manipulate these URLs to redirect users to malicious sites, execute scripts in the context of the user's session, or make unauthorized requests on behalf of the server.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs. Use a whitelist approach to ensure only expected and safe inputs are processed.\n2. **Use Built-in Functions**: Utilize PHP's built-in functions like `filter_var()` with `FILTER_VALIDATE_URL` to validate URLs.\n3. **Avoid Direct User Input in URLs**: Do not directly use user input to construct URLs. Instead, use predefined routes or mappings.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate XSS attacks.\n5. **Use HTTPS**: Ensure all URLs use HTTPS to prevent man-in-the-middle attacks.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to fix an unsecured URL vulnerability in PHP:\n\n```php\n<?php\n// Example of vulnerable code\n$user_input = $_GET['url'];\nheader(\"Location: $user_input\");\n\n// Fixed code\n$allowed_domains = ['example.com', 'another-example.com'];\n$user_input = $_GET['url'];\n\n// Validate URL\nif (filter_var($user_input, FILTER_VALIDATE_URL)) {\n    $url_components = parse_url($user_input);\n    if (in_array($url_components['host'], $allowed_domains)) {\n        header(\"Location: $user_input\");\n        exit;\n    }\n}\n\n// Redirect to a safe default page if validation fails\nheader(\"Location: /default-page.php\");\nexit;\n?>\n```\n\n### Library Dependencies\n\nThe above code does not require any external libraries to execute properly. It relies solely on PHP's built-in functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-0bba9b7d-1687-4d3a-8e7a-9d39d830a508",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3741,
                  "startColumn": 24,
                  "endLine": 3741,
                  "endColumn": 33,
                  "charOffset": 141472,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141472,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141472,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141472,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-666acb47-cd9b-49a2-b1f4-9e0d44ded24e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3737,
                  "startColumn": 22,
                  "endLine": 3737,
                  "endColumn": 31,
                  "charOffset": 141198,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141198,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141198,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141198,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-092376ae-b592-4cd2-9615-835c2397cb5d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3736,
                  "startColumn": 22,
                  "endLine": 3736,
                  "endColumn": 31,
                  "charOffset": 141143,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141143,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141143,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 141143,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-58da0288-e6f4-43de-a602-5bdd56a04a39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3712,
                  "startColumn": 21,
                  "endLine": 3712,
                  "endColumn": 30,
                  "charOffset": 140131,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140131,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140131,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140131,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3c972713-0bab-4c2f-8f5e-eaba5028092a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3710,
                  "startColumn": 16,
                  "endLine": 3710,
                  "endColumn": 25,
                  "charOffset": 140047,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140047,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140047,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140047,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9494d974-9076-4564-838c-3d5aaa783dfd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3664,
                  "startColumn": 65,
                  "endLine": 3664,
                  "endColumn": 74,
                  "charOffset": 138892,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138892,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138892,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138892,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b21e48e1-8cff-435e-8787-ffe927d154c4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3678,
                  "startColumn": 29,
                  "endLine": 3678,
                  "endColumn": 38,
                  "charOffset": 139244,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 139244,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 139244,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 139244,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5e70c9c7-045c-457e-9755-6877f9b129a1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3709,
                  "startColumn": 19,
                  "endLine": 3709,
                  "endColumn": 28,
                  "charOffset": 140007,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 140007,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b7d1dc6b-d9e7-454a-a1fd-b24f9f4c0081",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3664,
                  "startColumn": 27,
                  "endLine": 3664,
                  "endColumn": 36,
                  "charOffset": 138854,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138854,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138854,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138854,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-923eb53f-eb0d-41c1-a263-7d27eb6fbfe4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3659,
                  "startColumn": 29,
                  "endLine": 3659,
                  "endColumn": 38,
                  "charOffset": 138498,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138498,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138498,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138498,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6ae9eeb6-7151-4412-8418-2fa45268af89",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3644,
                  "startColumn": 16,
                  "endLine": 3644,
                  "endColumn": 25,
                  "charOffset": 138111,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138111,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138111,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138111,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-17c8b36f-ab33-4dbb-8781-1305b1a57f6c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3643,
                  "startColumn": 16,
                  "endLine": 3643,
                  "endColumn": 25,
                  "charOffset": 138037,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138037,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138037,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 138037,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d25f8f16-6b96-40b7-8806-af40c7b43b09",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3642,
                  "startColumn": 37,
                  "endLine": 3642,
                  "endColumn": 46,
                  "charOffset": 137993,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137993,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137993,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137993,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-068a2401-5f75-40bb-91e2-f89ffc544211",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3640,
                  "startColumn": 19,
                  "endLine": 3640,
                  "endColumn": 28,
                  "charOffset": 137908,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137908,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137908,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137908,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-78cbe763-b325-4dfb-9df1-9290f9256cab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3639,
                  "startColumn": 23,
                  "endLine": 3639,
                  "endColumn": 32,
                  "charOffset": 137863,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3c01a339-7565-44c0-ba81-15a2f9090178",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3634,
                  "startColumn": 24,
                  "endLine": 3634,
                  "endColumn": 33,
                  "charOffset": 137716,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137716,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ca4ca102-f3f0-4e73-b3e4-a246c9b3cd49",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3633,
                  "startColumn": 45,
                  "endLine": 3633,
                  "endColumn": 54,
                  "charOffset": 137664,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137664,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137664,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137664,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-41afd54f-666e-4fa6-a3f2-79a9d5bdec44",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3632,
                  "startColumn": 24,
                  "endLine": 3632,
                  "endColumn": 33,
                  "charOffset": 137586,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137586,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0501d5bc-8512-45ea-b0a3-16c1e7a27c41",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3630,
                  "startColumn": 20,
                  "endLine": 3630,
                  "endColumn": 29,
                  "charOffset": 137510,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-afe2d9da-74ec-45fb-b552-6de9fff0632f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3626,
                  "startColumn": 20,
                  "endLine": 3626,
                  "endColumn": 29,
                  "charOffset": 137336,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137336,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137336,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137336,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f5a90aa1-7c4d-4087-986e-fe58aa6a862e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3625,
                  "startColumn": 16,
                  "endLine": 3625,
                  "endColumn": 25,
                  "charOffset": 137272,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5d2a43cd-0e38-43a4-b0c8-c06bef7b7e8b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3620,
                  "startColumn": 16,
                  "endLine": 3620,
                  "endColumn": 25,
                  "charOffset": 137098,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137098,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9bbde63d-80b6-4c06-b8b9-7dfb079025b2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3621,
                  "startColumn": 16,
                  "endLine": 3621,
                  "endColumn": 25,
                  "charOffset": 137147,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137147,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137147,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 137147,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d1ef0bfb-08ef-471a-b2c6-ae479814a6f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3616,
                  "startColumn": 20,
                  "endLine": 3616,
                  "endColumn": 29,
                  "charOffset": 136996,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136996,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136996,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136996,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3e473962-ec7c-42ac-8ff7-e5593a8470e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3615,
                  "startColumn": 41,
                  "endLine": 3615,
                  "endColumn": 50,
                  "charOffset": 136948,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136948,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136948,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136948,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5f0ed6c8-1c2b-413f-90cf-034de34197dd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3608,
                  "startColumn": 24,
                  "endLine": 3608,
                  "endColumn": 33,
                  "charOffset": 136678,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136678,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c9e9accc-0046-46ab-96a3-acd094ab1ab3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3610,
                  "startColumn": 24,
                  "endLine": 3610,
                  "endColumn": 33,
                  "charOffset": 136782,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136782,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d812da17-d720-4351-8bce-aaaf8f011ba5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3614,
                  "startColumn": 20,
                  "endLine": 3614,
                  "endColumn": 29,
                  "charOffset": 136874,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136874,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a261eb19-4ed8-496a-801f-5710f27a118d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3604,
                  "startColumn": 24,
                  "endLine": 3604,
                  "endColumn": 33,
                  "charOffset": 136489,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136489,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136489,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136489,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6507154b-f51c-4797-aa33-33310b1294ce",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3603,
                  "startColumn": 20,
                  "endLine": 3603,
                  "endColumn": 29,
                  "charOffset": 136421,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136421,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136421,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136421,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b0254b5e-55ae-451f-98b3-e056e5557072",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3599,
                  "startColumn": 20,
                  "endLine": 3599,
                  "endColumn": 29,
                  "charOffset": 136272,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136272,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b80418f8-01a7-40c7-bda4-6270d209120b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3596,
                  "startColumn": 16,
                  "endLine": 3596,
                  "endColumn": 25,
                  "charOffset": 136116,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136116,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136116,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 136116,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-87054e97-e9c6-458d-89d1-b714d105fcb5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3593,
                  "startColumn": 16,
                  "endLine": 3593,
                  "endColumn": 25,
                  "charOffset": 135977,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135977,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135977,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135977,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ce61b395-9369-443f-b502-74ec18be2470",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3588,
                  "startColumn": 20,
                  "endLine": 3588,
                  "endColumn": 29,
                  "charOffset": 135725,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135725,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135725,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135725,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7a673a62-aa2a-48a0-a0be-a458813e04dd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3590,
                  "startColumn": 20,
                  "endLine": 3590,
                  "endColumn": 29,
                  "charOffset": 135879,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135879,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135879,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135879,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-7334e209-897e-404c-b602-735e8a4a42d5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3586,
                  "startColumn": 37,
                  "endLine": 3586,
                  "endColumn": 46,
                  "charOffset": 135676,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135676,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135676,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135676,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3f67b846-82fa-42dd-a9dd-cc36d3e3507e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3583,
                  "startColumn": 35,
                  "endLine": 3583,
                  "endColumn": 44,
                  "charOffset": 135538,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135538,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135538,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135538,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-09927f2a-e1c4-42b4-93bc-d5ad6e712ad1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3579,
                  "startColumn": 12,
                  "endLine": 3579,
                  "endColumn": 21,
                  "charOffset": 135396,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135396,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-03df2f0e-8bad-43cd-b4d3-3b6f05472f8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3573,
                  "startColumn": 12,
                  "endLine": 3573,
                  "endColumn": 21,
                  "charOffset": 135245,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135245,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135245,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135245,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a8e0e331-befb-4818-aed2-5ff1cc90a396",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3575,
                  "startColumn": 8,
                  "endLine": 3575,
                  "endColumn": 17,
                  "charOffset": 135291,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135291,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135291,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135291,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-82269ed8-65c6-4efe-b212-c68cc3b02d68",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3571,
                  "startColumn": 16,
                  "endLine": 3571,
                  "endColumn": 25,
                  "charOffset": 135187,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135187,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135187,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135187,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-65d5281b-9fd9-451f-8dfd-948cbd3607e9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3570,
                  "startColumn": 18,
                  "endLine": 3570,
                  "endColumn": 27,
                  "charOffset": 135148,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135148,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135148,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135148,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3542ecee-12f1-42da-8655-09fc26a1dd90",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3567,
                  "startColumn": 12,
                  "endLine": 3567,
                  "endColumn": 21,
                  "charOffset": 135077,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135077,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135077,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135077,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e83cfe9a-6d6a-49cd-8f1d-c11c6b84f0c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3565,
                  "startColumn": 16,
                  "endLine": 3565,
                  "endColumn": 25,
                  "charOffset": 135017,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135017,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135017,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 135017,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ead5cf53-b845-4f3f-9635-0b80a58b486b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3564,
                  "startColumn": 18,
                  "endLine": 3564,
                  "endColumn": 27,
                  "charOffset": 134976,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134976,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a25ad6a5-2516-4f79-b0f7-517286120738",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3558,
                  "startColumn": 22,
                  "endLine": 3558,
                  "endColumn": 31,
                  "charOffset": 134837,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134837,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0cc15c80-d6d9-4650-b3ea-476cb16a7074",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3560,
                  "startColumn": 12,
                  "endLine": 3560,
                  "endColumn": 21,
                  "charOffset": 134885,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134885,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134885,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134885,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-934ccc50-adcf-472c-ae00-a7c309b8d16a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3553,
                  "startColumn": 8,
                  "endLine": 3553,
                  "endColumn": 17,
                  "charOffset": 134681,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134681,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134681,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134681,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-91612423-2e56-4994-889a-3f17c3c75087",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3550,
                  "startColumn": 12,
                  "endLine": 3550,
                  "endColumn": 21,
                  "charOffset": 134631,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134631,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134631,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134631,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-07daaad1-c9de-43a4-bdc7-f2562d9a204d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3546,
                  "startColumn": 12,
                  "endLine": 3546,
                  "endColumn": 21,
                  "charOffset": 134523,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134523,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134523,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134523,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5fafd5ef-804e-4fb8-b53a-d117dd83d951",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3549,
                  "startColumn": 18,
                  "endLine": 3549,
                  "endColumn": 27,
                  "charOffset": 134585,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134585,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134585,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134585,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d05e7183-5944-44cd-a483-d4dd86bd24a5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3545,
                  "startColumn": 18,
                  "endLine": 3545,
                  "endColumn": 27,
                  "charOffset": 134484,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134484,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134484,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134484,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-304c88f6-6c96-4516-9b22-91a10149578e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3544,
                  "startColumn": 8,
                  "endLine": 3544,
                  "endColumn": 17,
                  "charOffset": 134405,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134405,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-450aa015-8694-45bc-aa29-89b33a97770c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3542,
                  "startColumn": 35,
                  "endLine": 3542,
                  "endColumn": 44,
                  "charOffset": 134353,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134353,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134353,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134353,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d3fbb0d0-6aca-4631-895e-81c12695417c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3538,
                  "startColumn": 16,
                  "endLine": 3538,
                  "endColumn": 25,
                  "charOffset": 134260,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134260,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134260,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134260,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b1d5d27c-8d00-4b98-b29c-f8bf4b20b6a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3542,
                  "startColumn": 8,
                  "endLine": 3542,
                  "endColumn": 17,
                  "charOffset": 134326,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134326,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134326,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134326,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6656f504-c4a9-439c-9c63-ce5197183a9c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3537,
                  "startColumn": 16,
                  "endLine": 3537,
                  "endColumn": 25,
                  "charOffset": 134216,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134216,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134216,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134216,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e1793fd7-5cd0-48a7-82e0-a92d8404a3b2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3535,
                  "startColumn": 16,
                  "endLine": 3535,
                  "endColumn": 25,
                  "charOffset": 134138,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134138,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134138,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134138,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e3635952-2ab6-4d15-8e69-8a1fb4fbcfd0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3533,
                  "startColumn": 16,
                  "endLine": 3533,
                  "endColumn": 25,
                  "charOffset": 134027,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134027,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134027,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134027,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-78ba4e3a-319d-4a36-95a3-589cd2f4b838",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3534,
                  "startColumn": 16,
                  "endLine": 3534,
                  "endColumn": 25,
                  "charOffset": 134073,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134073,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134073,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 134073,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-46b667bb-b7dc-46f2-82e2-adfc1b6a1264",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3532,
                  "startColumn": 16,
                  "endLine": 3532,
                  "endColumn": 25,
                  "charOffset": 133978,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133978,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133978,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133978,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-45295054-e231-4044-a569-4fb82af63a20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3530,
                  "startColumn": 49,
                  "endLine": 3530,
                  "endColumn": 58,
                  "charOffset": 133863,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133863,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-aafb7e63-d6da-4697-9e16-a798758d529d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3529,
                  "startColumn": 48,
                  "endLine": 3529,
                  "endColumn": 57,
                  "charOffset": 133792,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133792,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133792,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133792,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-f52c8f39-73b8-4136-a3c1-11e33ed5b992",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3530,
                  "startColumn": 22,
                  "endLine": 3530,
                  "endColumn": 31,
                  "charOffset": 133836,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133836,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-98bb7f7d-7fb3-469e-9e4d-6e55e5de1bb5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3529,
                  "startColumn": 18,
                  "endLine": 3529,
                  "endColumn": 27,
                  "charOffset": 133762,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133762,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133762,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133762,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b0db5a4b-423d-4c0a-9145-90adcc401d2e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3524,
                  "startColumn": 12,
                  "endLine": 3524,
                  "endColumn": 21,
                  "charOffset": 133554,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133554,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133554,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133554,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-b1f92a6c-cf97-4040-bdef-28cb50036513",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3523,
                  "startColumn": 12,
                  "endLine": 3523,
                  "endColumn": 21,
                  "charOffset": 133481,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-82d91d4d-d627-4a1b-aa15-1fb5e99a1781",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3523,
                  "startColumn": 46,
                  "endLine": 3523,
                  "endColumn": 55,
                  "charOffset": 133515,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133515,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133515,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133515,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-a3ad1252-3412-4321-8574-eba36e22f1d1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3519,
                  "startColumn": 24,
                  "endLine": 3519,
                  "endColumn": 33,
                  "charOffset": 133364,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133364,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-85ce857f-4815-4598-abd5-3e0ccac83f2b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3516,
                  "startColumn": 26,
                  "endLine": 3516,
                  "endColumn": 35,
                  "charOffset": 133186,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133186,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0923451a-8b4c-4bc8-b375-915ff04fd872",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "BoringSSL: Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 2919,
                  "startColumn": 27,
                  "endLine": 2919,
                  "endColumn": 38,
                  "charOffset": 110659,
                  "charLength": 11,
                  "snippet": {
                    "text": "TLS_VERSION",
                    "rendered": {
                      "text": "TLS_VERSION",
                      "markdown": "`TLS_VERSION`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-10caec62-0280-4650-a27c-be36d72550c9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3511,
                  "startColumn": 59,
                  "endLine": 3511,
                  "endColumn": 68,
                  "charOffset": 132866,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 132866,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 132866,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 132866,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ac940f82-f55e-4122-9c3f-a03a6921b67e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3515,
                  "startColumn": 16,
                  "endLine": 3515,
                  "endColumn": 25,
                  "charOffset": 133097,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133097,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133097,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 133097,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c0cb0910-b36e-402b-ad5c-4790b22c6be9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 3511,
                  "startColumn": 23,
                  "endLine": 3511,
                  "endColumn": 32,
                  "charOffset": 132830,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 132830,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 132830,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 132830,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4ef311e5-2bd0-4915-a91c-92ee5a8f5916",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 2208,
                  "startColumn": 38,
                  "endLine": 2208,
                  "endColumn": 47,
                  "charOffset": 82481,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 82481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 82481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 82481,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-61096001-5a8b-4a88-97cb-1b0667fddf16",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 1609,
                  "startColumn": 11,
                  "endLine": 1609,
                  "endColumn": 20,
                  "charOffset": 58194,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 58194,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 58194,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 58194,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-d3930c89-016b-4b42-8c78-8febbaa25533",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 2106,
                  "startColumn": 12,
                  "endLine": 2106,
                  "endColumn": 21,
                  "charOffset": 78274,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 78274,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 78274,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 78274,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-588c3ffb-d43e-4431-a324-cdad2d9de493",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "BoringSSL: Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 17,
                  "endLine": 151,
                  "endColumn": 28,
                  "charOffset": 4340,
                  "charLength": 11,
                  "snippet": {
                    "text": "TLS_VERSION",
                    "rendered": {
                      "text": "TLS_VERSION",
                      "markdown": "`TLS_VERSION`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-5fd8b87b-5094-4a6b-b6d5-acbd67112502",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 28,
                  "endLine": 447,
                  "endColumn": 37,
                  "charOffset": 17332,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17332,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17332,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17332,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-2e90fd52-2adf-416f-9c04-a19636a25ae7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 34,
                  "endLine": 446,
                  "endColumn": 43,
                  "charOffset": 17285,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17285,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17285,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17285,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ca13a70b-28c0-4eb6-9c0d-d7fc602b529f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/AuthLDAP.php"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 46,
                  "endLine": 416,
                  "endColumn": 55,
                  "charOffset": 15781,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15781,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15781,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/AuthLDAP.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15781,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c67b308d-631c-4de5-a3ca-317f113cc54b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/actorinformation.php"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 19,
                  "endLine": 50,
                  "endColumn": 28,
                  "charOffset": 1646,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1646,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1646,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1646,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-ffb2f3a9-ec38-49c3-ba91-7766a10316ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/actorinformation.php"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 75,
                  "endLine": 43,
                  "endColumn": 84,
                  "charOffset": 1508,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1508,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1508,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1508,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5ec2d50b-5dd9-430d-aa33-f42d10e55f7b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/actorinformation.php"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 23,
                  "endLine": 40,
                  "endColumn": 32,
                  "charOffset": 1358,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1358,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1358,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/actorinformation.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1358,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-95c16430-fe9a-4709-a3ca-4da89398e4ef",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not use the DES symmetric block cipher."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/SNMPCredential.php"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 24,
                  "endLine": 175,
                  "endColumn": 27,
                  "charOffset": 4602,
                  "charLength": 3,
                  "snippet": {
                    "text": "DES",
                    "rendered": {
                      "text": "DES",
                      "markdown": "`DES`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "The DES cipher was found, which is widely considered to be broken."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/SNMPCredential.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4602,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "AES"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Cryptography.Symmetric.WeakOrBrokenAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-29aaa5f0-c600-4200-b15c-6c6b70935487",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/UploadHandler.php"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 36,
                  "endLine": 207,
                  "endColumn": 45,
                  "charOffset": 9184,
                  "charLength": 9,
                  "snippet": {
                    "text": "http://')",
                    "rendered": {
                      "text": "http://')",
                      "markdown": "`http://')`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/UploadHandler.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9184,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "https://')"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-d0b4fdf1-5471-4970-bce3-3a7894a133ae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DisplayPreference.php"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 71,
                  "endLine": 697,
                  "endColumn": 80,
                  "charOffset": 21612,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21612,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21612,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21612,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-8567225e-8746-4184-9053-f18b058100a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DisplayPreference.php"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 43,
                  "endLine": 697,
                  "endColumn": 52,
                  "charOffset": 21584,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21584,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21584,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21584,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-280c4058-b6a2-4aab-ae8d-67cfaeeba5ab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Toolbox.php"
                },
                "region": {
                  "startLine": 1276,
                  "startColumn": 33,
                  "endLine": 1276,
                  "endColumn": 54,
                  "charOffset": 37411,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://{$proxy_creds}",
                    "rendered": {
                      "text": "http://{$proxy_creds}",
                      "markdown": "`http://{$proxy_creds}`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Toolbox.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 37411,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://{$proxy_creds}"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-cb5b3abc-c7fc-4f42-a1ad-e79759af78dc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/DisplayPreference.php"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 30,
                  "endLine": 696,
                  "endColumn": 39,
                  "charOffset": 21510,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/DisplayPreference.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21510,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-0736d56b-92d8-4dc0-a14b-98ba4102fcf8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ReservationItem.php"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 16,
                  "endLine": 676,
                  "endColumn": 80,
                  "charOffset": 26027,
                  "charLength": 64,
                  "snippet": {
                    "text": "echo Html::hidden('end', ['value'   => $_POST['reserve'][\"end\"]]",
                    "rendered": {
                      "text": "echo Html::hidden('end', ['value'   => $_POST['reserve'][\"end\"]]",
                      "markdown": "`echo Html::hidden('end', ['value'   => $_POST['reserve'][\"end\"]]`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26027,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('end', ['value'   => htmlentities($_POST['reserve'][\"end\"]])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26027,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('end', ['value'   => rawurlencode($_POST['reserve'][\"end\"]])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-c0c3c886-3892-4f13-91d1-b9145b11e08d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/UnmanagedTest.php"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 65,
                  "endColumn": 39,
                  "charOffset": 2033,
                  "charLength": 20,
                  "snippet": {
                    "text": "http://www.cisco.com",
                    "rendered": {
                      "text": "http://www.cisco.com",
                      "markdown": "`http://www.cisco.com`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/UnmanagedTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2033,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "https://www.cisco.com"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-e1d2c64b-7b67-44e8-9243-eb743b851d3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS: Do not echo unencoded GET/POST/COOKIE values"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ReservationItem.php"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 16,
                  "endLine": 675,
                  "endColumn": 82,
                  "charOffset": 25942,
                  "charLength": 66,
                  "snippet": {
                    "text": "echo Html::hidden('begin', ['value' => $_POST['reserve'][\"begin\"]]",
                    "rendered": {
                      "text": "echo Html::hidden('begin', ['value' => $_POST['reserve'][\"begin\"]]",
                      "markdown": "`echo Html::hidden('begin', ['value' => $_POST['reserve'][\"begin\"]]`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25942,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('begin', ['value' => htmlentities($_POST['reserve'][\"begin\"]])"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "When using $_GET/POST/COOKIE values via echo, failure to  encode the values will lead to Cross Site Scripting (XSS), where a malicious party can inject script into the webpage."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/ReservationItem.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25942,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "echo Html::hidden('begin', ['value' => rawurlencode($_POST['reserve'][\"begin\"]])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-4b61e105-7bcb-48be-b9a3-f93f38f3864f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Document.php"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 41,
                  "endLine": 317,
                  "endColumn": 50,
                  "charOffset": 10079,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10079,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10079,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10079,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-e734c2cc-b187-46fa-ad53-b63f0f7069b9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Document.php"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 41,
                  "endLine": 205,
                  "endColumn": 50,
                  "charOffset": 6172,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6172,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6172,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Document.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6172,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-65880dbe-09e5-419d-afec-d50eaf8c7254",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Glpi/Api/HL/Router.php"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 17,
                  "endLine": 589,
                  "endColumn": 26,
                  "charOffset": 22401,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Glpi/Api/HL/Router.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22401,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Glpi/Api/HL/Router.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22401,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Glpi/Api/HL/Router.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22401,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-9a387032-bfdd-4803-bfbd-6e2233da5434",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/asset/assetdefinition.php"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 10,
                  "endLine": 62,
                  "endColumn": 19,
                  "charOffset": 2060,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2060,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2060,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2060,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-6184629c-9f56-4d0c-8e25-d0d604908e58",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ajax/asset/assetdefinition.php"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 4,
                  "endLine": 41,
                  "endColumn": 13,
                  "charOffset": 1320,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ajax/asset/assetdefinition.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1320,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-5675d1cd-cc97-4373-8fe8-7234e26dcfa1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Item_SoftwareVersion.php"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 54,
                  "endLine": 1072,
                  "endColumn": 63,
                  "charOffset": 41293,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41293,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41293,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41293,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-beff21a3-8987-4206-adb6-5ffad50ebefd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "$_REQUEST should be avoided"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/Item_SoftwareVersion.php"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 25,
                  "endLine": 1072,
                  "endColumn": 34,
                  "charOffset": 41264,
                  "charLength": 9,
                  "snippet": {
                    "text": "$_REQUEST",
                    "rendered": {
                      "text": "$_REQUEST",
                      "markdown": "`$_REQUEST`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41264,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_GET"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41264,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_POST"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "$_REQUEST combines POST, GET, and cookie values in one array, making it easy for an attacker to modify a POST or cookie value by instead putting it in a GET and sending the URL to the victim"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/Item_SoftwareVersion.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41264,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "$_COOKIE"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "Implementation.PHP"
            ]
          }
        },
        {
          "ruleId": "glog-3b5079da-9648-41e7-b727-b50a4e299d74",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/AgentTest.php"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 17,
                  "endLine": 226,
                  "endColumn": 45,
                  "charOffset": 8429,
                  "charLength": 28,
                  "snippet": {
                    "text": "http://192.168.122.1:62354',",
                    "rendered": {
                      "text": "http://192.168.122.1:62354',",
                      "markdown": "`http://192.168.122.1:62354',`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/AgentTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8429,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "https://192.168.122.1:62354',"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-fa2f3b83-ac85-4016-a781-cf2fb732e9ea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/AgentTest.php"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 17,
                  "endLine": 224,
                  "endColumn": 45,
                  "charOffset": 8323,
                  "charLength": 28,
                  "snippet": {
                    "text": "http://192.168.1.118:62354',",
                    "rendered": {
                      "text": "http://192.168.1.118:62354',",
                      "markdown": "`http://192.168.1.118:62354',`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/AgentTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8323,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "https://192.168.1.118:62354',"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-d2309dd6-a6c7-4bae-9815-a1c052fde98f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/AgentTest.php"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 17,
                  "endLine": 225,
                  "endColumn": 59,
                  "charOffset": 8369,
                  "charLength": 42,
                  "snippet": {
                    "text": "http://[fe80::92a4:26c6:99dd:2d60]:62354',",
                    "rendered": {
                      "text": "http://[fe80::92a4:26c6:99dd:2d60]:62354',",
                      "markdown": "`http://[fe80::92a4:26c6:99dd:2d60]:62354',`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/AgentTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8369,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "https://[fe80::92a4:26c6:99dd:2d60]:62354',"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-95f7892f-e356-4462-bb58-70429b691259",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/AgentTest.php"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 17,
                  "endLine": 223,
                  "endColumn": 59,
                  "charOffset": 8263,
                  "charLength": 42,
                  "snippet": {
                    "text": "http://[fe80::b283:4fa3:d3f2:96b1]:62354',",
                    "rendered": {
                      "text": "http://[fe80::b283:4fa3:d3f2:96b1]:62354',",
                      "markdown": "`http://[fe80::b283:4fa3:d3f2:96b1]:62354',`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/AgentTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8263,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "https://[fe80::b283:4fa3:d3f2:96b1]:62354',"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-e220d642-76ad-475d-b37a-fde79f3ed18e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/AgentTest.php"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 17,
                  "endLine": 221,
                  "endColumn": 39,
                  "charOffset": 8177,
                  "charLength": 22,
                  "snippet": {
                    "text": "http://glpixps:62354',",
                    "rendered": {
                      "text": "http://glpixps:62354',",
                      "markdown": "`http://glpixps:62354',`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/AgentTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8177,
                        "charLength": 22
                      },
                      "insertedContent": {
                        "text": "https://glpixps:62354',"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-0c1a4394-a5bc-464e-8e0f-2771401a3759",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/AgentTest.php"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "endLine": 222,
                  "endColumn": 45,
                  "charOffset": 8217,
                  "charLength": 28,
                  "snippet": {
                    "text": "http://192.168.1.142:62354',",
                    "rendered": {
                      "text": "http://192.168.1.142:62354',",
                      "markdown": "`http://192.168.1.142:62354',`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/AgentTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8217,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "https://192.168.1.142:62354',"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-66084e6d-7ad2-49d7-96f3-c2ac94791527",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/TicketTest.php"
                },
                "region": {
                  "startLine": 4966,
                  "startColumn": 23,
                  "endLine": 4966,
                  "endColumn": 51,
                  "charOffset": 191508,
                  "charLength": 28,
                  "snippet": {
                    "text": "http://test.glpi-project.org",
                    "rendered": {
                      "text": "http://test.glpi-project.org",
                      "markdown": "`http://test.glpi-project.org`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/TicketTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 191508,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "https://test.glpi-project.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-61cb9cf1-3d0b-4eaa-b8f1-1a68aa762405",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure URL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "phpunit/functional/TicketTest.php"
                },
                "region": {
                  "startLine": 4978,
                  "startColumn": 23,
                  "endLine": 4978,
                  "endColumn": 51,
                  "charOffset": 191933,
                  "charLength": 28,
                  "snippet": {
                    "text": "http://test.glpi-project.org",
                    "rendered": {
                      "text": "http://test.glpi-project.org",
                      "markdown": "`http://test.glpi-project.org`"
                    }
                  },
                  "sourceLanguage": "php"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "phpunit/functional/TicketTest.php"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 191933,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "https://test.glpi-project.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}